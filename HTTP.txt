REQUESTS I:

API key: a1dc09ec50eb456791da81ad94318342



--------------------------------------------------------------------------------------------------------------------------------------------------

https://app.rebrandly.com/account/api-keys



--------------------------------------------------------------------------------------------------------------------------------------------------

const jsonButton = document.querySelector('#generate');
const buttonContainer = document.querySelector('#buttonContainer');
const display = document.querySelector('#displayContainer');
const collection = ["Another", "More", "Next", "Continue", "Keep going", "Click me", "A new one"];

const generateJson = () => {
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  
  xhr.onreadystatechange = () => {
    if (xhr.readyState === XMLHttpRequest.DONE) {
  renderResponse(xhr.response);
      changeButton();
    }
  }
  xhr.open('GET', 'https://jsonplaceholder.typicode.com/users');
  xhr.send();
}

const formatJson = (resJson) => {
  resJson = JSON.stringify(resJson);
  let counter = 0;
  return resJson.split('')
  .map(char => {
    switch (char) {
      case ',':
        return `,\n${' '.repeat(counter * 2)}`;
      case '{':
        counter += 1;
        return `{\n${' '.repeat(counter * 2)}`;
      case '}':
        counter -= 1;
        return `\n${' '.repeat(counter * 2)}}`;
      default:
        return char;
    }
  })
  .join('');
}

const renderResponse = (jsonResponse) => {
  const jsonSelection = Math.floor(Math.random() * 10);
  display.innerHTML = `<pre>${formatJson(jsonResponse[jsonSelection])}</pre>`;
}

const changeButton = () => {
  const newText = Math.floor(Math.random() * 7);
  jsonButton.innerHTML = `${collection[newText]}!`;
}

jsonButton.addEventListener('click', generateJson);

---


h1 {
  font-family: courier;
  font-size: 40px;
}

#buttonContainer {
  display: flex;
  justify-content: center;
}

button {
  cursor: pointer;
}

#generate {
  font-size: 15px;
  height: 3em;
  width: max-content;
  font-family: monaco;
}

pre {
  border-style: solid;
  height: 100%;
  overflow: auto;
  overflow-wrap: break-word;
  padding: 10px;
}

---


<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>JSON Jenerator</title>
    <link rel="stylesheet" type="text/css" href="public/style.css" />

  </head>
  <body>
    <h1>JSON Jenerator:</h1>
    <main>
      <div id="displayContainer">

      </div>
      <div id="buttonContainer">
        <button type="button" id="generate">Jenerate!</button>
      </div>

    </main>
    <script src="public/main.js"></script>
  </body>
</html>



--------------------------------------------------------------------------------------------------------------------------------------------------

console.log('First message!');
setTimeout(() => {
   console.log('This message will always run last...');
}, 0);
console.log('Second message!');



--------------------------------------------------------------------------------------------------------------------------------------------------

const xhr = new XMLHttpRequest();
const url = 'https://api-to-call.com/endpoint';

xhr.responseType = 'json';
xhr.onreadystatechange = () => {
  if (xhr.readyState === XMLHttpRequest.DONE) {
    return xhr.response;
  }
};

xhr.open('GET', url);
xhr.send();



--------------------------------------------------------------------------------------------------------------------------------------------------

const url = 'https://api.datamuse.com/words?';
const queryParams = 'rel_rhy=';

const inputField = document.querySelector('#input');
const submit = document.querySelector('#submit');
const responseField = document.querySelector('#responseField');

const getSuggestions = () => {
  const wordQuery = inputField.value;
  const endpoint = `${url}${queryParams}${wordQuery}`;
  
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';

  xhr.onreadystatechange = () => {
    if (xhr.readyState === XMLHttpRequest.DONE) {
      renderResponse(xhr.response);
    }
  }
  
  xhr.open('GET', endpoint);
  xhr.send();
}

const displaySuggestions = (event) => {
  event.preventDefault();
  while(responseField.firstChild){
    responseField.removeChild(responseField.firstChild);
  }
  getSuggestions();
}

submit.addEventListener('click', displaySuggestions);

---


const renderResponse = (res) => {
  if(!res){
    console.log(res.status)
  }

  if(!res.length){
    responseField.innerHTML = "<p>Try again!</p><p>There were no suggestions found!</p>"
    return
  }

  let wordList = []

  for(let i = 0; i < Math.min(res.length, 10); i++){
    wordList.push(`<li>${res[i].word}</li>`)
  }

  wordList = wordList.join("")

  responseField.innerHTML = `<p>You might be interested in:</p><ol>${wordList}</ol>`
  return
}

const renderRawResponse = (res) => {
  let trimmedResponse = res.slice(0, 10)
  responseField.innerHTML = `<text>${JSON.stringify(trimmedResponse)}</text>`
}

const renderJsonResponse = (res) => {
  let rawJson = {}
  for(let key in response){
    rawJson[key] = response[key]
  }

  rawJson = JSON.stringify(rawJson).replace(/,/g, ", \n")
  responseField.innerHTML = `<pre>${rawJson}</pre>`
}

---


header {
  text-align: center;
  background-color: #ef6b68;
  padding: 10px;
}

main {
  background-color: #ef6b68;
  height: 900px;
  text-align: center;
}

h1 {
  height: 38px;
  font-family: Work Sans, sans-serif;
  font-size: 32px;
  font-weight: 200;
  letter-spacing: 0.6px;
  text-align: center;
  color: #1f233e;
  padding-top: 40px;
  margin: 0;
}

li {
  text-align: center;
  margin: 0 25% 0 25%;
}

.logo {
  width: 110px;
  height: 28px;
  margin-top: 40px;
  object-fit: contain;
}

.container {
  width: 400px;
  margin: auto;
  text-align: center;
}

#input {
  width: 219px;
  height: 37px;
  border-radius: 3.2px;
  border: solid 0.8px #1f233e;
  background-color: inherit;
  display: block;
  margin: auto;
  margin-top: 10px;
  font-family: Source Sans Pro;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
}

#submit {
  width: 125px;
  height: 30px;
  border-radius: 2px;
  border-color: inherit;
  background-color: #1f233e;
  margin-top: 30px;
  font-family: Work Sans, sans-serif;
  font-size: 16px;
  font-weight: 500;
  letter-spacing: 0.3px;
  text-align: center;
  color: #ef6b68;
  margin-right: -3px;
}

#responseField {
  min-width: 191px;
  min-height: 120px;
  background-color: #1f233e;
  margin: auto;
  margin-top: 25px;
  font-family: Source Sans Pro;
  font-weight: 400;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
  overflow-wrap: break-word;
  padding: 20px;
}

#submit:hover {
  color: #ffffff;
  cursor: pointer;
}

#submit:active {
  background-color: #ffffff;
  border-color: #ffffff;
  color: #ef6b68;
  cursor: pointer;
}

---


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Word Smith</title>
  <link rel="stylesheet" type="text/css" href="public/style.css" />
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro|Work+Sans:200,500" rel="stylesheet">
</head>

<body>
  <header>
    <img src="https://s3.amazonaws.com/codecademy-content/courses/intermediate-javascript-requests/wordsmith_logo.svg" class="logo" />

  </header>
  <main id="main">
    <div class="container">

      <h1>Enter a Word</h1>

      <form id="form" autocomplete="off">
        <input type="text" id="input" value="">
        <button id="submit">SUBMIT</button>
      </form>

      <div id="responseField">

      </div>

    </div>
  </main>
  <script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>
  <script src="public/main.js"></script>
  <script src="public/helperFunctions.js"></script>
</body>
</html>




--------------------------------------------------------------------------------------------------------------------------------------------------

const url = 'https://api.datamuse.com/words?';
const queryParams = 'rel_jjb=';
const additionalParams = '&topics=';

const inputField = document.querySelector('#input');
const topicField = document.querySelector('#topic');
const submit = document.querySelector('#submit');
const responseField = document.querySelector('#responseField');

const getSuggestions = () => {
  const wordQuery = inputField.value;
  const topicQuery = topicField.value;
  const endpoint = `${url}${queryParams}${wordQuery}${additionalParams}${topicQuery}`;
  
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';

  xhr.onreadystatechange = () => {
    if (xhr.readyState === XMLHttpRequest.DONE) {
      renderResponse(xhr.response);
    }
  }
  
  xhr.open('GET', endpoint);
  xhr.send();
}

const displaySuggestions = (event) => {
  event.preventDefault();
  while(responseField.firstChild){
    responseField.removeChild(responseField.firstChild);
  }
  getSuggestions();
}

submit.addEventListener('click', displaySuggestions);

---


const renderResponse = (res) => {

  if(!res){
    console.log(res.status)
  }

  if(!res.length){
    responseField.innerHTML = "<p>Try again!</p><p>There were no suggestions found!</p>"
    return
  }

  let wordList = []
  
  for(let i = 0; i < Math.min(res.length, 10); i++){

    wordList.push(`<li>${res[i].word}</li>`)
  }

  wordList = wordList.join("")

  
  responseField.innerHTML = `<p>You might be interested in:</p><ol>${wordList}</ol>`
  return
}

const renderRawResponse = (res) => {
  
  let trimmedResponse = res.slice(0, 10)
  
  responseField.innerHTML = `<text>${JSON.stringify(trimmedResponse)}</text>`
}

const renderJsonResponse = (res) => {

  let rawJson = {}
  for(let key in response){
    rawJson[key] = response[key]
  }

  rawJson = JSON.stringify(rawJson).replace(/,/g, ", \n")
  
  responseField.innerHTML = `<pre>${rawJson}</pre>`
}

---


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Word Smith</title>
  <link rel="stylesheet" type="text/css" href="public/style.css" />
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro|Work+Sans:200,500" rel="stylesheet">
</head>

<body>
  <header>
    <img src="https://s3.amazonaws.com/codecademy-content/courses/intermediate-javascript-requests/wordsmith_logo.svg" class="logo" />

  </header>
  <main id="main">
    <div class="container">

      <h1>Enter a Word</h1>

      <form id="form" autocomplete="off">
        <input type="text" id="input" value="" placeholder="type in a word">

        <input type="text" id="topic" value="" placeholder="type in a topic">
        <button id="submit">SUBMIT</button>
      </form>

      <div id="responseField">

      </div>

    </div>
  </main>
  <script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>
  <script src="public/main.js"></script>
  <script src="public/helperFunctions.js"></script>
</body>
</html>

---


header {
  text-align: center;
  background-color: #ef6b68;
  padding: 10px;
}

main {
  background-color: #ef6b68;
  height: 900px;
  text-align: center;
}

h1 {
  height: 38px;
  font-family: Work Sans, sans-serif;
  font-size: 32px;
  font-weight: 200;
  letter-spacing: 0.6px;
  text-align: center;
  color: #1f233e;
  padding-top: 40px;
  margin: 0;
}

li {
  text-align: center;
  margin: 0 25% 0 25%;
}

.logo {
  width: 110px;
  height: 28px;
  margin-top: 40px;
  object-fit: contain;
}

.container {
  width: 400px;
  margin: auto;
  text-align: center;
}

input {
  width: 219px;
  height: 37px;
  border-radius: 3.2px;
  border: solid 0.8px #1f233e;
  background-color: inherit;
  display: block;
  margin: auto;
  margin-top: 10px;
  font-family: Source Sans Pro;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
}

#submit {
  width: 125px;
  height: 30px;
  border-radius: 2px;
  border-color: inherit;
  background-color: #1f233e;
  font-family: Work Sans, sans-serif;
  font-size: 16px;
  font-weight: 500;
  letter-spacing: 0.3px;
  margin-top: 30px;
  text-align: center;
  color: #ef6b68;
  margin-right: -3px;
}

#responseField {
  min-width: 191px;
  min-height: 120px;
  background-color: #1f233e;
  margin: auto;
  margin-top: 25px;
  font-family: Source Sans Pro;
  font-weight: 400;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
  overflow-wrap: break-word;
  padding: 20px;
}

#submit:hover {
  color: #ffffff;
  cursor: pointer;
}

#submit:active {
  background-color: #ffffff;
  border-color: #ffffff;
  color: #ef6b68;
  cursor: pointer;
}



--------------------------------------------------------------------------------------------------------------------------------------------------

const xhr = new XMLHttpRequest();
const url = 'https://api-to-call.com/endpoint';
const data = JSON.stringify({id: '200'});

xhr.responseType = 'json';

xhr.onreadystatechange = () => {
  if(xhr.readyState === XMLHttpRequest.DONE){
    return xhr.response;
  }
}

xhr.open('POST', url);
xhr.send(data);



--------------------------------------------------------------------------------------------------------------------------------------------------

const apiKey = '<a1dc09ec50eb456791da81ad94318342>';
const url = 'https://api.rebrandly.com/v1/links';

const inputField = document.querySelector('#input');
const shortenButton = document.querySelector('#shorten');
const responseField = document.querySelector('#responseField');

const shortenUrl = () => {
  const urlToShorten = inputField.value;
  const data = JSON.stringify({destination: urlToShorten});

  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  
  xhr.onreadystatechange = () => {
    if (xhr.readyState === XMLHttpRequest.DONE) {
  		renderResponse(xhr.response);
		}
  }
  xhr.open('POST', url);
  xhr.setRequestHeader('Content-type', 'application/json');
	xhr.setRequestHeader('apikey', apiKey);
  xhr.send(data);
}

const displayShortUrl = (event) => {
  event.preventDefault();
  while(responseField.firstChild){
    responseField.removeChild(responseField.firstChild);
  }
  shortenUrl();
}

shortenButton.addEventListener('click', displayShortUrl);

---


const renderResponse = (res) => {
  if(res.errors){
    responseField.innerHTML = "<p>Sorry, couldn't format your URL.</p><p>Try again.</p>"
  } else {
    responseField.innerHTML = `<p>Your shortened url is: </p><p> ${res.shortUrl} </p>`
  }
}

const renderRawResponse = (res) => {
  if(res.errors){
    responseField.innerHTML = "<p>Sorry, couldn't format your URL.</p><p>Try again.</p>"
  } else {
    let structuredRes = JSON.stringify(res).replace(/,/g, ", \n")
    structuredRes = `<pre>${structuredRes}</pre>`

    responseField.innerHTML = `${structuredRes}`
  }
}

---


header {
  height: 60px;
  text-align: center;
}

main {
  background-color: #0087de;
  height: 900px;
  text-align: center;
}

h1 {
  height: 38px;
  font-family: Roboto;
  font-size: 32px;
  font-weight: 300;
  letter-spacing: 0.6px;
  text-align: center;
  color: #1f233e;
  padding-top: 40px;
}

.logo {
  width: 110px;
  height: 28px;
  margin-top: 40px;
  object-fit: contain;
}

.container {
  width: 400px;
  margin: auto;
  text-align: center;
}

#input {
  width: 219px;
  height: 37px;
  border-radius: 3.2px;
  border: solid 0.8px #1f233e;
  background-color: inherit;
  display: block;
  margin: auto;
  font-family: Source Sans Pro;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
}

#shorten {
  width: 91px;
  height: 37px;
  border-radius: 3.2px;
  border: solid 0.8px #1f233e;
  background-color: inherit;
  margin-top: 48px;
  font-family: Source Sans Pro;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
  margin-right: -3px;
}

#shorten:hover {
  background-color: #1f233e;
  border: solid 0.8px #4a4a4a;
  color: #0087de;
  cursor: pointer;
}

#shorten:active {
  background-color: #ffffff;
  border: solid 0.8px #4a4a4a;
  color: #1f233e;
  cursor: pointer;
}

#responseField {
  min-width: 191px;
  min-height: 120px;
  border: solid 2px #ffffff;
  margin: auto;
  margin-top: 25px;
  font-family: Source Sans Pro;
  font-size: 16px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
  overflow: auto;
}

---


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Byte Size</title>
  <link rel="stylesheet" type="text/css" href="public/style.css" />
  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro" rel="stylesheet">
</head>

<body>
  <header>
    <img src="https://s3.amazonaws.com/codecademy-content/courses/intermediate-javascript-requests/bytesize_logo.svg" class="logo" />

  </header>
  <main id="main">
    <div class="container">

      <h1>Enter a URL</h1>

      <form id="form" autocomplete="off">
        <input type="text" id="input" value="">
        <button id="shorten">Shorten</button>
      </form>

      <div id="responseField">

      </div>

    </div>
  </main>
  <script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>
  <script src="public/main.js"></script>
  <script src="public/helperFunctions.js"></script>
</body>
</html>



--------------------------------------------------------------------------------------------------------------------------------------------------

const jsonButton = document.querySelector('#generate');
const buttonContainer = document.querySelector('#buttonContainer');
const display = document.querySelector('#displayContainer');
const collection = ["Another", "More", "Next", "Continue", "Keep going", "Click me", "A new one"];

const generateJson = async () => {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/users');
    if(response.ok){
      const jsonResponse = await response.json();
      renderResponse(jsonResponse);
      changeButton();
    }
  } catch(error) {
    console.log(error);
  }
};
    
const formatJson = (resJson) => {
  resJson = JSON.stringify(resJson);
  let counter = 0;
  return resJson.split('')
  .map(char => {
    switch (char) {
      case ',':
        return `,\n${' '.repeat(counter * 2)}`;
      case '{':
        counter += 1;
        return `{\n${' '.repeat(counter * 2)}`;
      case '}':
        counter -= 1;
        return `\n${' '.repeat(counter * 2)}}`;
      default:
        return char;
    }
  })
  .join('');
};

const renderResponse = (jsonResponse) => {
  const jsonSelection = Math.floor(Math.random() * 10);
  display.innerHTML = `<pre>${formatJson(jsonResponse[jsonSelection])}</pre>`;
};

const changeButton = () => {
  const newText = Math.floor(Math.random() * 7);
  jsonButton.innerHTML = `${collection[newText]}!`;
};

jsonButton.addEventListener('click', generateJson);

---


h1 {
  font-family: courier;
  font-size: 40px;
}

#buttonContainer {
  padding: 15% 35% 25% 35%
}

#generate {
  font-size: 15px;
  height: 3em;
  width: max-content;
  font-family: monaco;
}

pre {
  border-style: solid;
  height: 100%;
  overflow: auto;
  overflow-wrap: break-word;
}

---


<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>JSON Jenerator</title>
    <link rel="stylesheet" type="text/css" href="public/style.css" />

  </head>
  <body>
    <h1>JSON Jenerator:</h1>
    <main>
      <div id="displayContainer">

      </div>
      <div id="buttonContainer">
        <button type="button" id="generate">Jenerate!</button>
      </div>

    </main>
    <script src="public/main.js"></script>
  </body>
</html>



--------------------------------------------------------------------------------------------------------------------------------------------------

fetch('https://api-to-call.com/endpoint').then(response => {
  if (response.ok) {
    return response.json();
  }
  throw new Error('Request failed!');
}, networkError => {
  console.log(networkError.message);
}).then(jsonResponse => {
  return jsonResponse;
});



--------------------------------------------------------------------------------------------------------------------------------------------------

const url = 'https://api.datamuse.com/words';
const queryParams = '?sl=';

const inputField = document.querySelector('#input');
const submit = document.querySelector('#submit');
const responseField = document.querySelector('#responseField');

const getSuggestions = () => {
  const wordQuery = inputField.value;
  const endpoint = `${url}${queryParams}${wordQuery}`;
  
  fetch(endpoint, {cache: 'no-cache'}).then(response => {
    if (response.ok) {
      return response.json();
    }
    throw new Error('Request failed!');
  }, networkError => {
    console.log(networkError.message)
  })
}

const displaySuggestions = (event) => {
  event.preventDefault();
  while(responseField.firstChild){
    responseField.removeChild(responseField.firstChild);
  }
  getSuggestions();
};

submit.addEventListener('click', displaySuggestions);

---


const renderResponse = (res) => {
  // Handles if res is falsey
  if(!res){
    console.log(res.status);
  }
  
  if(!res.length){
    responseField.innerHTML = "<p>Try again!</p><p>There were no suggestions found!</p>";
    return;
  }

 
  let wordList = [];
 
  for(let i = 0; i < Math.min(res.length, 10); i++){

    wordList.push(`<li>${res[i].word}</li>`);
  }

  wordList = wordList.join("");

  
  responseField.innerHTML = `<p>You might be interested in:</p><ol>${wordList}</ol>`;
  return
}


const renderRawResponse = (res) => {
 
  let trimmedResponse = res.slice(0, 10);

  responseField.innerHTML = `<text>${JSON.stringify(trimmedResponse)}</text>`;
}


const renderJsonResponse = (res) => {

  let rawJson = {};
  for(let key in res){
    rawJson[key] = res[key];
  }

  rawJson = JSON.stringify(rawJson).replace(/,/g, ", \n");
 
  responseField.innerHTML = `<pre>${rawJson}</pre>`;
}

---


header {
  text-align: center;
  background-color: #ef6b68;
  padding: 10px;
}

main {
  background-color: #ef6b68;
  height: 900px;
  text-align: center;
}

h1 {
  height: 38px;
  font-family: Work Sans, sans-serif;
  font-size: 32px;
  font-weight: 200;
  letter-spacing: 0.6px;
  text-align: center;
  color: #1f233e;
  padding-top: 40px;
  margin: 0;
}

li {
  text-align: center;
  margin: 0 25% 0 25%;
}

.logo {
  width: 110px;
  height: 28px;
  margin-top: 40px;
  object-fit: contain;
}

.container {
  width: 400px;
  margin: auto;
  text-align: center;
}

#input {
  width: 219px;
  height: 37px;
  border-radius: 3.2px;
  border: solid 0.8px #1f233e;
  background-color: inherit;
  display: block;
  margin: auto;
  margin-top: 10px;
  font-family: Source Sans Pro;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
}

#submit {
  width: 125px;
  height: 30px;
  border-radius: 2px;
  border-color: inherit;
  background-color: #1f233e;
  margin-top: 30px;
  font-family: Work Sans, sans-serif;
  font-size: 16px;
  font-weight: 500;
  letter-spacing: 0.3px;
  text-align: center;
  color: #ef6b68;
  margin-right: -3px;
}

#responseField {
  min-width: 191px;
  min-height: 120px;
  background-color: #1f233e;
  margin: auto;
  margin-top: 25px;
  font-family: Source Sans Pro;
  font-weight: 400;
  font-size: 14px;
  letter-spacing: 0.2px;
  text-align: center;
  color: #ffffff;
  overflow-wrap: break-word;
  overflow: auto;
  padding: 20px;
}

#submit:hover {
  color: #ffffff;
  cursor: pointer;
}

#submit:active {
  background-color: #ffffff;
  border-color: #ffffff;
  color: #ef6b68;
  cursor: pointer;
}

---


<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Word Smith</title>
  <link rel="stylesheet" type="text/css" href="public/style.css" />
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro|Work+Sans:200,500" rel="stylesheet">
</head>

<body>
  <header>
    <img src="https://s3.amazonaws.com/codecademy-content/courses/intermediate-javascript-requests/wordsmith_logo.svg" class="logo" />

  </header>
  <main id="main">
    <div class="container">

      <h1>Enter a Word</h1>

      <form id="form" autocomplete="off">
        <input type="text" id="input" value="">
        <button id="submit">SUBMIT</button>
      </form>

      <div id="responseField">

      </div>

    </div>
  </main>
  <script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>
  <script src="public/main.js"></script>
  <script src="public/helperFunctions.js"></script>
</body>
</html>



--------------------------------------------------------------------------------------------------------------------------------------------------





































































