---------------------------------------
Useful snippents for Rails app building
---------------------------------------


Pluralize helper example
------------------------

<%= pluralize @subscriber_count %>


---


Simple format helper example
----------------------------

<%= simple_format @community.rules %>


---


Time ago in words helper example
--------------------------------

<%= time_ago_in_words post.created_at %>


---


Datetime helpers for footer
---------------------------

<small class="text-muted">&copy; Online Store 
  <%= Date.today.year %>
</small>

<%= account.created_at > 2.days.ago ? 'New to instagramm' : "Followed by #{account.total_followers} users" %>


---


Truncate helper example
-----------------------

<%= truncate post.body, length: 200 %>


---


Date time format helper example
-------------------------------

<%= @profile.created_at.strftime('%d/%m/%Y') %>


---


Rails options snippets
----------------------

<%= form.label :category %>
<%= form.select(:category_id, options_from_collection_for_select(Category.all, :id, :heading, (@product.category.id if @product.category.present?)), {}, {class: 'form-control'}) %>


---


Customize rails option
----------------------

<%= f.collection_check_boxes :venue_ids, Venue.all, :id, :name, checked: Venue.all.map(&:id) do |b| %>
  <span>
    <%= b.check_box %>
    <%= b.label %>
  </span>
<% end %>


---


Blank link in app
-----------------

<%= link_to "#{@account.website}", "https://#{@account.website}", target: :_blank if @account.website.present? %>

<%= link_to "path_title", "https://path", target: :_blank if path_title.present? %>


---


Check output info snippet
-------------------------

some_controller.rb
------------------

render plain: params[:technology].inspect


---


Rails console cmd for checking entity attributes
------------------------------------------------

$ rails c

Contact.attribute_names


---


Restart page with get request syntax example
--------------------------------------------

routes.rb:
----------

resource :contacts, only: [:new, :create], path_names: { :new => '' }


---


Link for sign out with helpers
------------------------------

<%= link_to 'Delete', technology_path(technology), method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-primary btn-sm' %>


---


Usefull sqlite3 helpfull cmd
----------------------------

$ rails c

pragma table_info(technologies);


---


Form with collection example
----------------------------

<%= form_for ([@technology, @technology.lessons.build]) do |f| %>
  <%= f.text_field ... %>
<% end %>


---


Index migration example
-----------------------

add_index :users, :username, unique: true


---


Helpfull snippet
----------------

value: current_user.try(:username)


---


DRY snippet example for controllers
-----------------------------------

Class ApplicationController < ActionController::Base
  before_action :set_categories

  private

  def set_categories
    @categories = Category.all
  end
end


---


Rails js.erb view file snippet example
--------------------------------------

_some_template.js.erb
---------------------

alert('message has been saved');

$("#initiate-conversation").hide();
$("#conversation_messages").html("<%= escape_javascript(render partial: 'browse/messages') %>");


---


The way to turn off CSRF that won't render a null session
---------------------------------------------------------

class ApplicationController < ActionController::Base

  skip_before_action :verify_authenticity_token
  
end


---


Rendering the new action
------------------------

redirect_to :action => 'new'


---


Redirecting / Rendering a different page when Javascript is disabled
--------------------------------------------------------------------

your.html.erb file
------------------

<%=link_to "New Building", new_building_path, :id => 'new_building_link' %>


javascript file
---------------

$(document).load(function() {
  $("#new_building_link").click(function() {
    $.ajax({
      type:     "POST",  
      url:      "/buildings/add_building",
      dataType: "script"
    });
    return false;
  });
});


---


Combining link_to with render :partial
--------------------------------------

<%= link_to render(:partial => 'shared/logo'), root_url %>


---


Add to controller snippets
--------------------------

def new
  @community = Community.find(params[:community_id])
  @post = Post.new
end

def create
  @post = Post.new(post_params)
  @post.account_id = current_account.id
  @post.community_id = params[:community_id]

  if @post.save
    redirect_to community_path(@post.community_id)
  else
    @community = Community.find(params[:community_id])
    render :new
  end
end


---



def create
  if user_exists?
    @author = current_user.username
    @author.save
  end
end


---



def create
  @comment = @commentable.comments.new comment_params
  @comment.user = current_user
  @comment.save
  redirect_to @commentable, notice: "Your comment was successfully posted."
end


---



def stripe_connect
  auth_data = request.env["omniauth.auth"]
  @user = current_user
  
  if @user.persisted?
    @user.provider = auth_data.provider
    @user.uid = auth_data.uid
    @user.access_code = auth_data.credentials.token
    @user.publishable_key = auth_data.info.stripe_publishable_key
    @user.save

    sign_in_and_redirect @user, event: :authentication
    flash[:notice] = 'Stripe Account Created And Connected' if is_navigational_format?
  else
    session["devise.stripe_connect_data"] = request.env["omniauth.auth"]
    redirect_to root_path
  end
end


---



@post = Post.includes(:comments).find(params[:id])


---



Subscription.where(community_id: params[:community_id], account_id: current_account.id)


---



def profile
  @profile = Account.find_by_username params[:username]
  @posts = @profile.posts
end


def create
  @order_item = @order.order_items.new(order_params)
  @order.save
  session[:order_id] = @order.id
end

def update
  @order_item = @order.order_items.find(params[:id])
  @order_item.update_attributes(order_params)
  @order_items = current_order.order_items
end


---



def create
  post_id = params[:post_id]

  vote = Vote.new
  vote.post_id = params[:post_id]
  vote.upvote = params[:upvote]
  vote.account_id = current_account.id

  # check if vote by this user exists
  existing_vote  = Vote.where(account_id: current_account.id, post_id: post_id)
  @new_vote = existing_vote.size < 1

  respond_to do |format|
    format.js {
      if existing_vote.size > 0
        # destroy existing vote
        existing_vote.first.destroy
      else
        # save new vote
        if vote.save
          @success = true
        else
          @success = false
        end
      end

      @post = Post.find(post_id)
      @is_upvote = params[:upvote]
      render 'votes/create'
    }
  end
end


---



def create
  @article = Article.find(params[:atricle_id])
  @article.comments.create(comment_params)

  redirect_to article_path(@article)
end


---



def choose_plan
  plan = params[:plan]

  @subscription = current_account.subscription

  if @subscription.present? && @subscription.update(plan: plan)
    # plan updated successfully
    current_account.setup_stripe_subscription
  else
    # plan was updated
  end
end

def edit
  @technologies = Technology.all
  @technology = Technology.find(params[:id])
end


---


def create
  @conversation = Conversation.new(conversation_params)
  @conversation.sender_id = current_account.id
  @conversation.messages.first.account_id = current_account.id
  
  @messages = @conversation.messages

  match = Match.between(current_account.id, id)
  @match = match.first if match.present?


  if @conversation.save!
    # render partial: "browse/messages"
    # logger.debug 'conversation has been saved'
  else
    # logger.debug 'unable to save conversation!'
  end
end


---


@users = Account.where.not(id: current_account.id)


---


def create
  @article = Article.find(params[:article_id])
  @article.comments.create(comment_params)

  redirect_to article_path(@article)
end


---


def new
  @lesson = Lesson.new(lesson_params)
  @technology = Technology.find(params[:id])
  @ruby = Ruby.find(params[:id])
end

def create
  @lesson = Lesson.new(lesson_params)
  @technology = Technology.find(params[:id])
  @ruby = Ruby.find(params[:id])

  if @lesson.valid?
    @lesson.save

    redirect_to @technology
  else
    render action 'new'
  end
end


---


Add categories options to form
------------------------------

<%= form.label :category, class: 'mb-5' %>
<%= form.select(:category_id, options_from_collection_for_select(Category.all, :id, :heading, (@product.category.id if @product.category.present?)), {}, { class: 'form-control' }) %>




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------
Usefull javascript snippets
---------------------------


Make online video in browser faster
-----------------------------------

(function(){ document.querySelector('video').playbackRate = 2.0; })();



----------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------
Usefull rails commands
----------------------

Interesting rails cmd's
--------------------

$ rails db:prepare
$ rails db:reset
$ rails db:setup
$ rails db:seed:replant
$ rails middleware
$ rails initializers
$ rails initializers | grep devise
$ rails stats
$ rails runner
$ rails runner 'puts "Hello world"'
$ rails runner 'puts "#{User.first.email}"'
$ rails time:zones
$ rails


---



Rubocop usage
-------------

$ rubocop
$ rubocop -a
$ rubocop -A



---



Docker compose add
------------------

$ sudo apt-install docker-compose


---


Add column (migration) cmd
--------------------------

$ rails g migration add_username_to_users username:string


---


Add index to database example
-----------------------------

$ rails g migration add_username_index


---


New API key for rails app
-------------------------- 

$ rails new my_api --api


---


Rails app create cmd (property_finder)
--------------------------------------

$ rails new property_finder --database-postgresql --skip-test --skip-action-cable --skip-active-storage --skip-turbolinks --skip-yarn


---


Console commands for editors starting
-------------------------------------

$ atom .
$ subl .
$ code .


---


Create new credentials for Rails app
------------------------------------

$ rm -rf config/credentials.yml.enc && EDITOR="mate --wait" bin/rails credentials:edit


---


Clear tmp cach
--------------

$ rake tmp:cache:clear


---


Your Yarn packages are out of date
----------------------------------

$ yarn install --check-files


---


Add credentials for google_map app cmd
--------------------------------------

$ rails credentials:edit --environment=development


---


Create rails api app
--------------------

$ rails new app_name --api


---


Rails console reload from console
---------------------------------

> reload!  

Reloading...
=> true

irb(main):005:0>


---


Set environment for database (psql)
-----------------------------------


$ rails db:environment:set RAILS_ENV=development


---


Refresh, modify and clean Rails application database by one complex console command
-----------------------------------------------------------------------------------

---v1---

$ rails db:drop && rails db:create && rails db:migrate && rails db:seed --trace


---v2---

$ rails db:{drop,create,migrate,seed} --trace


---


Add products with scaffold example
----------------------------------

$ rails g scaffold product name description:text price:decimal is_best_offer:boolean images:array videos:array


---


Add categories to rails app with scaffold
-----------------------------------------

---1---

$ rails g scaffold category heading overview:text display:boolean


---2---

$ rails g migration add_category_to_products category:references


---






---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------
Associations (Rails 6)
----------------------

Association types
-----------------

belongs_to
has_one
has_many
has_many :through
has_one :through
has_and_belongs_to_many


---


belongs_to
----------

model.rb
--------

class Book < ApplicationRecord
  belongs_to :author 
end


migration.rb
------------

class CreateOrders < ActiveRecord::Migration[6.0]
  def change
    create_table :authors do |t|
      t.string :name
      t.timestamps
    end

    create_table :books do |t|
      t.belongs_to :author, foreign_key: true 
      t.datetime :published_at
      t.timestamps
    end
  end
end


---


has_one
-------

model.rb
--------

class Supplier < ApplicationRecord
  has_one :account  
end


migration.rb:
-------------

class CreateSuppliers < ActiveRecord::Migration[6.0]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier, index: { unique: true }, foreign_key: true
      t.string :account_number
      t.timestamps
    end
  end
end


---


has_many:
---------

class.rb:
---------

class Author < ApplicationRecord
  has_many :books
end


migration.rb:
-------------

class CreateAuthors < ActiveRecord::Migration[6.0]
  def change
    create_table :authors do |t|
      t.string :name
      t.timestamps
    end

    create_table :books do |t|
      t.belongs_to :author, index: true, foreign_key: true
      t.datetime :published_at
      t.timestamps
    end
  end
end


---


has_many :through :
-------------------

class.rb:
---------

class Physician < ApplicationRecord
  has_many :appointments
  has_many :patients, through: :appointments
end

class Appointment < ApplicationRecord
  belongs_to :physician
  belongs_to :patient
end

class Patient < ApplicationRecord
  has_many :appointments
  has_many :physicians, through: :appointments
end


migration.rb:
-------------

class CreateAppointments < ActiveRecord::Migration[6.0]
  def change
    create_table :physicians do |t|
      t.string :name
      t.timestamps
    end

    create_table :patients do |t|
      t.string :name
      t.timestamps
    end

    create_table :appointments do |t|
      t.belongs_to :physician
      t.belongs_to :patient
      t.datetime :appointment_date
      t.timestamps
    end
  end
end


class.rb:
---------

class Document < ApplicationRecord
  has_many :sections
  has_many :paragraphs, through: :sections
end

class Section < ApplicationRecord
  belongs_to :document
  has_many :paragraphs
end

class Paragraph < ApplicationRecord
  belongs_to :section
end

view.html.erb:
--------------

@document.paragraphs


---


has_one :through :
------------------

class.rb:
---------

class Supplier < ApplicationRecord
  has_one :account
  has_one :account_history, through: :account
end

class Account < ApplicationRecord
  belongs_to :supplier
  has_one :account_history
end

class AccountHistory < ApplicationRecord
  belongs_to :account
end

migrations.rb:
--------------

class CreateAccountHistories < ActiveRecord::Migration[6.0]
  def change
    create_table :suppliers do |t|
      t.string :name
      t.timestamps
    end

    create_table :accounts do |t|
      t.belongs_to :supplier
      t.string :account_number
      t.timestamps
    end

    create_table :account_histories do |t|
      t.belongs_to :account
      t.integer :credit_rating
      t.timestamps
    end
  end
end


---


has_and_belongs_to_many:
------------------------

class.rb:
---------

class Assembly < ApplicationRecord
  has_and_belongs_to_many :parts
end

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end

migration.rb:
-------------

class CreateAssembliesAndParts < ActiveRecord::Migration[6.0]
  def change
    create_table :assemblies do |t|
      t.string :name
      t.timestamps
    end

    create_table :parts do |t|
      t.string :part_number
      t.timestamps
    end

    create_table :assemblies_parts, id: false do |t|
      t.belongs_to :assembly
      t.belongs_to :part
    end
  end
end


---


Polymorphic Associations:
-------------------------

class.rb:
---------

class Picture < ApplicationRecord
  belongs_to :imageable, polymorphic: true
end

class Employee < ApplicationRecord
  has_many :pictures, as: :imageable
end

class Product < ApplicationRecord
  has_many :pictures, as: :imageable
end

migration.rb:
-------------

class CreatePictures < ActiveRecord::Migration[6.0]
  def change
    create_table :pictures do |t|
      t.string  :name
      t.bigint  :imageable_id
      t.string  :imageable_type
      t.timestamps
    end

    add_index :pictures, [:imageable_type, :imageable_id]
  end
end

class CreatePictures < ActiveRecord::Migration[6.0]
  def change
    create_table :pictures do |t|
      t.string :name
      t.references :imageable, polymorphic: true
      t.timestamps
    end
  end
end


---


Self Joins:
-----------

model.rb:
---------

class Employee < ApplicationRecord
  has_many :subordinates, class_name: "Employee", foreign_key: "manager_id"
  belongs_to :manager, class_name: "Employee", optional: true
end

migration.rb:
-------------

class CreateEmployees < ActiveRecord::Migration[6.0]
  def change
    create_table :employees do |t|
      t.references :manager, foreign_key: { to_table: :employees }
      t.timestamps
    end
  end
end


Methods Added by belongs_to:
----------------------------

model.rb:
---------

class Book < ApplicationRecord
  belongs_to :author
end

Book methods:
-------------

rails c:
--------

@author = @book.author
@author = @book.reload_author
@book.author = @author
@author = @book.build_author(author_number: 123, author_name: "John Doe")
@author = @book.create_author(author_number: 123, author_name: "John Doe")


---


Options for belongs_to:
-----------------------

:autosave
:class_name

:counter_cache :
----------------

class Book < ApplicationRecord
  belongs_to :author, counter_cache: :count_of_books
end

class Author < ApplicationRecord
  has_many :books
end


:dependent
:foreign_key

:primary_key :
--------------

class User < ApplicationRecord
  self.primary_key = 'guid' # primary key is guid and not id
end

class Todo < ApplicationRecord
  belongs_to :user, primary_key: 'guid'
end


:inverse_of
:polymorphic
:touch
:validate
:optional


model.rb:
---------

class Book < ApplicationRecord
  belongs_to :author, touch: :books_updated_at, counter_cache: true
end


---


Scopes for belongs_to:
----------------------

where :
-------

class Book < ApplicationRecord
  belongs_to :author, -> { where active: true }
end


includes :
----------

class Chapter < ApplicationRecord
  belongs_to :book, -> { includes :author }
end

class Book < ApplicationRecord
  belongs_to :author
  has_many :chapters
end

class Author < ApplicationRecord
  has_many :books
end


readonly
select


---


Do Any Associated Objects Exist:
--------------------------------

if @book.author.nil?
  @msg = "No author found for this book"
end


Methods by has_one:
-------------------

model.rb:
---------

class Supplier < ApplicationRecord
  has_one :account
end


> rails c

@account = @supplier.account
@account = @supplier.reload_account
@supplier.account = @account
@account = @supplier.build_account(terms: "Net 30")


Options for has_one:
--------------------

model.rb:
---------

class Supplier < ApplicationRecord
  has_one :account, class_name: "Billing", dependent: :nullify
end


---


menthods:
---------

:as
:autosave
:class_name
:dependent
:foreign_key
:inverse_of
:primary_key
:source
:source_type
:through
:touch
:validate


---


Scopes for has_one:
-------------------

where:
------

class Supplier < ApplicationRecord
  has_one :account, -> { where "confirmed = 1" }
end


includes:
---------

class Supplier < ApplicationRecord
  has_one :account, -> { includes :representative }
end

class Account < ApplicationRecord
  belongs_to :supplier
  belongs_to :representative
end

class Representative < ApplicationRecord
  has_many :accounts
end


readonly
select


---


Methods by has_many:
--------------------

collection
collection<<(object, ...)
collection.delete(object, ...)
collection.destroy(object, ...)
collection=(objects)
collection_singular_ids
collection_singular_ids=(ids)
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {})
collection.create(attributes = {})
collection.create!(attributes = {})
collection.reload


model.rb:
---------

class Author < ApplicationRecord
  has_many :books
end


> rails c
---------

> author.books
> author.books<<(object, ...)
> author.books.delete(object, ...)
> author.books.destroy(object, ...)
> author.books=(objects)
> author.book_ids
> author.book_ids=(ids)
> author.books.clear
> author.books.empty?
> author.books.size
> author.books.find(...)
> author.books.where(...)
> author.books.exists?(...)
> author.books.build(attributes = {}, ...)
> author.books.create(attributes = {})
> author.books.create!(attributes = {})
> author.books.reload


controller.rb:
--------------

@books = @author.books
@author.books << @book1
@author.books.delete(@book1)
@author.books.destroy(@book1)
@book_ids = @author.book_ids
@author.books.clear

<% if @author.books.empty? %>
  No Books Found
<% end %>

@book_count = @author.books.size
@available_book = @author.books.find(1)

@available_books = @author.books.where(available: true) # No query yet
@available_book = @available_books.first # Now the database will be queried

@book = @author.books.build(published_at: Time.now, book_number: "A12345")

@books = @author.books.build([
  { published_at: Time.now, book_number: "A12346" },
  { published_at: Time.now, book_number: "A12347" }
])


---


The has_many association supports these options:
------------------------------------------------

:as
:autosave
:class_name
:counter_cache
:dependent
:foreign_key
:inverse_of
:primary_key
:source
:source_type
:through
:validate


Scopes for has_many:
--------------------

where
extending

group:
------

class Author < ApplicationRecord
  has_many :chapters, -> { group 'books.id' }, through: :books
end


includes:
---------

person.articles << article unless person.articles.include?(article)


limit:
------

class Author < ApplicationRecord
  has_many :recent_books, -> { order('published_at desc').limit(100) }, class_name: "Book"
end


offset

order:
------

class Author < ApplicationRecord
  has_many :books, -> { order "date_confirmed DESC" }
end


readonly
select
distinct:
---------

class Person
  has_many :readings
  has_many :articles, -> { distinct }, through: :readings
end


---


Methods Added by has_and_belongs_to_many:
-----------------------------------------

collection
collection<<(object, ...)
collection.delete(object, ...)
collection.destroy(object, ...)
collection=(objects)
collection_singular_ids
collection_singular_ids=(ids)
collection.clear
collection.empty?
collection.size
collection.find(...)
collection.where(...)
collection.exists?(...)
collection.build(attributes = {})
collection.create(attributes = {})
collection.create!(attributes = {})
collection.reload


model.rb:
---------

class Part < ApplicationRecord
  has_and_belongs_to_many :assemblies
end



$ rails c
---------

> part.assemblies
> part.assemblies<<(object, ...)
> part.assemblies.delete(object, ...)
> part.assemblies.destroy(object, ...)
> part.assemblies=(objects)
> part.assembly_ids
> part.assembly_ids=(ids)
> part.assemblies.clear
> part.assemblies.empty?
> part.assemblies.size
> part.assemblies.find(...)
> part.assemblies.where(...)
> part.assemblies.exists?(...)
> part.assemblies.build(attributes = {}, ...)
> part.assemblies.create(attributes = {})
> part.assemblies.create!(attributes = {})
> part.assemblies.reload


controller.rb:
--------------

collection:
-----------

@assemblies = @part.assemblies
@part.assemblies << @assembly1
@part.assemblies.delete(@assembly1)
@part.assemblies.destroy(@assembly1)
@assembly_ids = @part.assembly_ids

<% if @part.assemblies.empty? %>
  This part is not used in any assemblies
<% end %>

@assembly_count = @part.assemblies.size
@assembly = @part.assemblies.find(1)
@new_assemblies = @part.assemblies.where("created_at > ?", 2.days.ago)
@assembly = @part.assemblies.build({assembly_name: "Transmission housing"})
@assembly = @part.assemblies.create({assembly_name: "Transmission housing"})
@assemblies = @part.assemblies.reload


---


Options for has_and_belongs_to_many:
------------------------------------

model.rb:
---------

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { readonly }, autosave: true
end


The has_and_belongs_to_many association supports these options:
---------------------------------------------------------------

:association_foreign_key
:autosave
:class_name
:foreign_key
:join_table
:validate


model.rb:
---------

class User < ApplicationRecord
  has_and_belongs_to_many :friends, class_name: "User", foreign_key: "this_user_id", association_foreign_key: "other_user_id"
end


Scopes for has_and_belongs_to_many:
-----------------------------------

model.rb:
---------

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where active: true }
end


standard querying methods:
--------------------------

where
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where "factory = 'Seattle'" }
end

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { where factory: 'Seattle' }
end



extending
group
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { group "factory" }
end


includes
limit
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { order("created_at DESC").limit(50) }
end


offset
order
-----

class Parts < ApplicationRecord
  has_and_belongs_to_many :assemblies, -> { order "assembly_name ASC" }
end


readonly
select
distinct


---


Association Callbacks:
----------------------

controller.rb:
--------------

before_add
after_add
before_remove
after_remove


model.rb:
---------

class Author < ApplicationRecord
  has_many :books, before_add: :check_credit_limit

  def check_credit_limit(book)
    throw(:abort) if limit_reached?
  end
end

class Author < ApplicationRecord

  has_many :books, before_add: [:check_credit_limit, :calculate_shipping_charges]

  def check_credit_limit(book)
    throw(:abort) if limit_reached?
  end

  def calculate_shipping_charges(book)
    author.books << book
    author.books = [book, book2]
    book.update(author_id: 1)
  end
end



def check_credit_limit(book)
  throw(:abort) if limit_reached?
end


---


Association Extensions:
-----------------------

model.rb:
---------

class Author < ApplicationRecord
  has_many :books do
    def find_by_book_prefix(book_number)
      find_by(category_id: book_number[0..2])
    end
  end
end


module FindRecentExtension
  def find_recent
    where("created_at > ?", 5.days.ago)
  end
end

class Author < ApplicationRecord
  has_many :books, -> { extending FindRecentExtension }
end

class Supplier < ApplicationRecord
  has_many :deliveries, -> { extending FindRecentExtension }
end


Single Table Inheritance (STI):
-------------------------------

$ rails generate model vehicle type:string color:string price:decimal{ 10.2 }
$ rails generate model car --parent=Vehicle


model.rb:
---------

class Car < Vehicle
end


controller.rb:
--------------

> rails c
---------

Car.create(color: 'Red', price: 10000)

INSERT INTO "vehicles" ("type", "color", "price") VALUES ('Car', 'Red', 10000)


Car.all

SELECT "vehicles".* FROM "vehicles" WHERE "vehicles"."type" IN ('Car')



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------
PostgreSQL
----------

PosgreSQL guide, get starting: (windows)
----------------------------------------

https://winitpro.ru/index.php/2019/10/25/ustanovka-nastrojka-postgresql-v-windows/


---


PostgreSQL commands
-------------------

https://guruadmin.ru/page/15-practical-postgresql-database-administration-commands


---


PostgreSQL documentation (Getting Started)
------------------------------------------

https://www.microfocus.com/documentation/idol/IDOL_12_0/MediaServer/Guides/html/English/Content/Getting_Started/Configure/_TRN_Set_up_PostgreSQL.htm


psql -U userName

CREATE DATABASE myDatabase WITH ENCODING 'UTF8' LC_COLLATE='English_United Kingdom' LC_CTYPE='English_United Kingdom';

\c databaseName

\set ON_ERROR_STOP on

\i 'path/postgres.sql'

GRANT TEMP ON DATABASE databaseName TO userName;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO userName;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO userName;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO userName;


---


PostgreSQL cmd for role create
------------------------------

postgres=# CREATE ROLE second WITH SUPERUSER REPLICATION LOGIN CREATEDB CREATEROLE PASSWORD '123456';

\du
\q
\l


---


PostgerSQL documentation (db creating)
--------------------------------------

https://www.postgresql.org/docs/current/sql-createdatabase.html


CREATE DATABASE lusiadas;


CREATE DATABASE sales OWNER salesapp TABLESPACE salesspace;


CREATE DATABASE music
  LOCALE 'sv_SE.utf8'
  TEMPLATE template0;
  

CREATE DATABASE music2
  LOCALE 'sv_SE.iso885915'
  ENCODING LATIN9
  TEMPLATE template0;






---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------
Database optimization in Rails
------------------------------

gem 'activerecord-analyze'

$ User.count
$ User.all.explain
$ User.all.analyze
$ User.where(id: 3).analyze
$ User.where(name: 'Dave').analyze

in migration file
-----------------

class AddIndexToUserName < ActiveRecord::Migration[6.1]
  def change
    add_index :users, :name
  end
end


---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------
Rails multiple object create snippets for seeds.rb
--------------------------------------------------

Seeds snippet with account
--------------------------


Account.create([ 
  { username: 'John',  first_name: 'John',  last_name: 'Doe',   email: 'johndoe@example.com',    password: 'password' }, 
  { username: 'Jane',  first_name: 'Jane',  last_name: 'Smith', email: 'fanesmith@example.com',  password: 'password' }, 
  { username: 'Susan', first_name: 'Susan', last_name: 'Baker', email: 'susanbaker@example.com', password: 'password' }, 
])


Account.create([
  { first_name: 'Sarah',    last_name: 'Jones',   username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { name: 'Sarah',    username: 'sarah',    email: 'sarah@example.com',    admin: true,  maker: true,   backer: true,  password: 'Password1' },
  { name: 'Emily',    username: 'emily',    email: 'emily@example.com',    admin: false, maker: true,   backer: true,  password: 'Password1' },
  { name: 'Melanie',  username: 'melanie',  email: 'melanie@example.com',  admin: false, maker: false,  backer: false, password: 'Password1' },
  { name: 'Caroline', username: 'caroline', email: 'caroline@example.com', admin: false, maker: true,   backer: false, password: 'Password1' },
  { name: 'Bridget',  username: 'bridget',  email: 'bridget@example.com',  admin: false, maker: false,  backer: true,  password: 'Password1' }
])


Account.create([
  { first_name: 'Sarah',    last_name: 'Jones',   email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


Account.create([
  { email: 'sarah@example.com',     password: 'Password1' },
  { email: 'emily@example.com',     password: 'Password1' },
  { email: 'melanie@example.com',   password: 'Password1' },
  { email: 'caroline@example.com',  password: 'Password1' },
  { email: 'bridget@example.com',   password: 'Password1' }
])


---


Seeds snippet with user
-----------------------

User.create([ 
  { username: 'John',  first_name: 'John',  last_name: 'Doe',   email: 'johndoe@example.com',    password: 'password' }, 
  { username: 'Jane',  first_name: 'Jane',  last_name: 'Smith', email: 'fanesmith@example.com',  password: 'password' }, 
  { username: 'Susan', first_name: 'Susan', last_name: 'Baker', email: 'susanbaker@example.com', password: 'password' }, 
])


User.create([
  { first_name: 'Sarah',    last_name: 'Jones',   username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { name: 'Sarah',    username: 'sarah',    email: 'sarah@example.com',    admin: true,  maker: true,   backer: true,  password: 'Password1' },
  { name: 'Emily',    username: 'emily',    email: 'emily@example.com',    admin: false, maker: true,   backer: true,  password: 'Password1' },
  { name: 'Melanie',  username: 'melanie',  email: 'melanie@example.com',  admin: false, maker: false,  backer: false, password: 'Password1' },
  { name: 'Caroline', username: 'caroline', email: 'caroline@example.com', admin: false, maker: true,   backer: false, password: 'Password1' },
  { name: 'Bridget',  username: 'bridget',  email: 'bridget@example.com',  admin: false, maker: false,  backer: true,  password: 'Password1' }
])


User.create([
  { first_name: 'Sarah',    last_name: 'Jones',   email: 'sarah@example.com',     password: 'Password1' },
  { first_name: 'Emily',    last_name: 'Hart',    email: 'emily@example.com',     password: 'Password1' },
  { first_name: 'Melanie',  last_name: 'hunt',    email: 'melanie@example.com',   password: 'Password1' },
  { first_name: 'Caroline', last_name: 'Simpson', email: 'caroline@example.com',  password: 'Password1' },
  { first_name: 'Bridget',  last_name: 'Smith',   email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { username: 'sarah',    email: 'sarah@example.com',     password: 'Password1' },
  { username: 'emily',    email: 'emily@example.com',     password: 'Password1' },
  { username: 'melanie',  email: 'melanie@example.com',   password: 'Password1' },
  { username: 'caroline', email: 'caroline@example.com',  password: 'Password1' },
  { username: 'bridget',  email: 'bridget@example.com',   password: 'Password1' }
])


User.create([
  { email: 'sarah@example.com',     password: 'Password1' },
  { email: 'emily@example.com',     password: 'Password1' },
  { email: 'melanie@example.com',   password: 'Password1' },
  { email: 'caroline@example.com',  password: 'Password1' },
  { email: 'bridget@example.com',   password: 'Password1' }
])



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------
Lorem Ipsum text
----------------


Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------
Rails ActiveStorage
-------------------

---1---

$ rails active_storage:install

Copied migration 20210212141003_create_active_storage_tables.active_storage.rb from active_storage


---2---

$ rails db:migrate


config.active_storage.service = :local


local:
  service: Disk
  root: <%= Rails.root.join("storage") %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------
Render partial on the same page after clicking on link_to with AJAX
-------------------------------------------------------------------

---1---

Create a div that will contain the loaded data. In this case div#current_customer
---------------------------------------------------------------------------------

<div id='customer'></div>


---2---

Add remote: true to your link
-----------------------------

<td><%= link_to 'Show', customer, remote: true %></td>


---3---

Name your partial customers/_show.html.erb (don't forget the _so it can be called as a partial)
-----------------------------------------------------------------------------------------------

<p>
   <strong>Name:</strong>
   <%= @customer.name %>
   <%= @customer.id %>
</p>

<%= link_to 'Edit Customer', edit_customer_path(@customer) %> 


---4---

Respond to Javascript in the show method in CustomersController
---------------------------------------------------------------

respond_to do |format|
  format.js {render layout: false} # Add this line to you respond_to block
end


---5---

Create your show.js.erb view, which is going to handle the front-end changes when respond_to :jsis gonna be called (In this case triggered by remote: true)
-----------------------------------------------------------------------------------------------------------------------------------------------------------

$ touch show.js.erb


---6---

Tell show.js.erb what it must do (Replace #current_customer content with your partial, using the right @customer)
-----------------------------------------------------------------------------------------------------------------

customers/show.js.erb
---------------------

$("#current_customer").html("<%= escape_javascript(render partial: 'customers/show', locals: { customer: @customer } ) %>");



customers/index.html.erb
------------------------

<div id="current_customer">
</div>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------
Using javascript in rails controller example
--------------------------------------------

class CommentsController < ApplicationController

  def create
    @comment = Comment.new comment_params
    @comment.account_id = current_account.id

    respond_to do |format|
      format.js {
        if @comment.save
        
          @comments = Comment.where(post_id: @comment.post_id)
          render 'comments/create'
        else
          # unable to save
        end
      }
    end
  end

  def comment_params
    params.require(:comment).permit(:message, :post_id)
  end
end


file.js.erb
-----------

document.getElementById('post-comments').innerHTML = "<%= escape_javascript(render partial: 'posts/comments', locals: { comments: @comments }) %>";



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------
Usefull web resources
---------------------

How to start using Arrays in Rails with PostgreSQL
--------------------------------------------------


https://blog.arkency.com/2014/10/how-to-start-using-arrays-in-rails-with-postgresql



---



How to Save Multiple Checkbox Values to a Database in Rails
-----------------------------------------------------------

https://www.sitepoint.com/save-multiple-checkbox-values-database-rails


---



Hexlet on YouTube
-----------------

https://www.youtube.com/watch?v=aEnk5r-zDdc&list=PLQUXJZ4AOy9qJDD9x4jK1fgnSo3gycwHx&index=33


---



Web scrapping with Ruby
-----------------------

https://oxylabs.io/blog/web-scraping-with-ruby


---



Rails 6 (and 5): User Accounts with 3 types of Roles – Devise, Rails Admin, CanCanCan
-------------------------------------------------------------------------------------

https://altalogy.com/blog/rails-6-user-accounts-with-3-types-of-roles


---



Build with Ruby on Rails
------------------------

https://web-crunch.com/collections/lets-build-with-ruby-on-rails


---



Rails routing guides
--------------------

https://guides.rubyonrails.org/routing.html


---



Copy to clipboard with javscript
--------------------------------

https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html


---


Interesting rails blog tutorial
-------------------------------


https://www.freecodecamp.org/news/lets-create-an-intermediate-level-ruby-on-rails-application-d7c6e997c63f


---


Rails GitHub Deanout
--------------------

https://github.com/Deanout


---


Dockerize Rails 7 App
---------------------

https://codingpackets.com/blog/dockerize-rails-7-app/


---



iPhone app resources
--------------------

https://github.com/ging/vish
https://github.com/jwncoexists/strategicHR
https://github.com/GilTorch/rails-mooc-portfolio-project
https://service-iphone.ru/
https://documentation.mjml.io/#mj-attributes


---



Ruby lessons
------------

https://github.com/krdprog/rubyschool-notes/blob/master/one-by-one/lesson-01.md


---



Yandex cloud for rails GitHub
-----------------------------

https://github.com/programrails/carrierwave-yandex-disk
https://github.com/anjlab/yandex-disk


---



Add video with carrierwave
--------------------------


https://github.com/rheaton/carrierwave-video
https://www.randygirard.com/how-to-create-a-video-upload-platform-using-ruby-on-rails-part-1/
https://admatbandara.medium.com/video-upload-processing-with-ruby-on-rails-c3c5aa04e08


---


Implement add more images feature
---------------------------------


http://bobintornado.github.io/rails/2015/12/29/Multiple-Images-Uploading-With-CarrierWave-and-PostgreSQL-Array.html


---



Add bootstrap 5 to Rails 7
--------------------------


---v1---

https://jasonfleetwoodboldt.com/courses/stepping-up-rails/rails-7-bootstrap/


---v2---

https://www.bootrails.com/blog/rails-7-bootstrap-5-tutorial/


---v3---

https://dev.to/coorasse/rails-7-bootstrap-5-and-importmaps-without-nodejs-4g8


---



BOOTSRAP DATEPICKER
-------------------


https://bootstrap-datepicker.readthedocs.io/en/latest/
https://github.com/vitalets/bootstrap-datepicker


---



STRF Time refactoring
---------------------

http://strftime.net/


---



Graphs for rails
----------------

https://chartkick.com/



---



Quote turbo-app example
-----------------------

https://www.hotrails.dev/turbo-rails/quote-totals-turbo-frames



---




esbuild-rails
-------------

https://github.com/excid3/esbuild-rails



---



Stimulus for Rails
------------------

https://github.com/hotwired/stimulus-rails


---



Rails Deanin
------------

https://deanin.com/
https://github.com/Deanout


---


Creating a Linux Desktop application with Ruby
----------------------------------------------

https://iridakos.com/programming/2018/01/25/creating-a-gtk-todo-application-with-ruby
https://github.com/cedlemo/ruby-gtk3-tutorial


---



Ruby & Rails Tools
------------------

https://www.ruby-toolbox.com/categories



---


Rails with Docker compose
-------------------------


https://github.com/ryanwi/rails7-on-docker
https://github.com/rails/rails/pull/46762
https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development
https://github.com/coderjourney/03-learn-to-use-docker-in-development


---



Authentication for Rails API with devise-api gem
------------------------------------------------

https://github.com/nejdetkadir/devise-api



---


Rails guides
------------

https://gorails.com
https://web-crunch.com/
https://blog.corsego.com/


---



Rails cources
-------------

https://www.theodinproject.com/paths/full-stack-ruby-on-rails?
https://exercism.org/tracks/ruby/exercises


---


Rails Templates
---------------

https://railsbytes.com/



---



Rails API
---------

https://github.com/loopstudio/rails-api-boilerplate
https://github.com/shftco/rails-api-boilerplate
https://github.com/Deanout/api_boilerplate_rails

Starting from 5.5.0 RC1 Doorkeeper requires client authentication for Resource Owner Password Grant
as stated in the OAuth RFC. You have to create a new OAuth client (Doorkeeper::Application) if you didn't
have it before and use client credentials in HTTP Basic auth if you previously used this grant flow without
client authentication. 

To opt out of this you could set the "skip_client_authentication_for_password_grant" configuration option
to "true", but note that this is in violation of the OAuth spec and represents a security risk.

Read https://github.com/doorkeeper-gem/doorkeeper/issues/561#issuecomment-612857163 for more details.



---


Best doc library
----------------

https://devdocs.io


---


Download Youtube video
----------------------

https://9convert.com/en2


---


iphones
-------

https://service-iphone.ru/remont-iphone/iphone-5/#category-0


---


eLearning Platforms on GitHub
-----------------------------

https://github.com/GilTorch/rails-mooc-portfolio-project/tree/master/app/models


https://github.com/jwncoexists/strategicHR/tree/master/app/controllers


---


Flickr.com
----------

https://www.flickr.com/search/?text=groningen


---


David Battersby clones
----------------------

https://github.com/search?q=david+battersby


---


Add simple Likes Button Rails 6
-------------------------------


https://medium.com/swlh/how-to-add-a-simple-like-button-to-your-rails-6-application-c1040999dc2


---


Beautifull images and photos
----------------------------

https://unsplash.com/


---


Site making resource
--------------------

https://www.sitepoint.com/


---


Rails 6 Amazon S3 storage guide
-------------------------------

https://edgeguides.rubyonrails.org/active_storage_overview.html


---


DefactoSoftware
---------------

https://github.com/DefactoSoftware/Hours
https://happyhours.io/


---


New reloc One account
---------------------

https://one.newrelic.com/launcher
/nr1-core.home?pane=eyJuZXJkbGV0SWQiOiJucjEtY29yZS5saXN0aW5nLWVtcHR5LXN0YXRlIn0=&cards[0]
=eyJuZXJkbGV0SWQiOiJzZXR1cC1uZXJkbGV0cy5zZXR1cC1ydWJ5LWludGVncmF0aW9uIiwiYWNjb3VudElkIjozMDg4OTg1fQ==&platform[accountId]
=3088985&platform[timeRange][duration]=1800000&platform[$isFallbackTimeRange]=true


---


Active Record Nested Attributes docs
------------------------------------


https://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html


---


ImageMagick GraphicsMagick
--------------------------


file:///C:/Program%20Files/ImageMagick-7.0.10-Q16-HDRI/index.html
file:///C:/Program%20Files%20(x86)/GraphicsMagick-1.3.34-Q16/www/index.html


---


Rails learning video
--------------------


https://www.youtube.com/watch?v=qvGGz-2WHpU


---


Learn about simple_form helper
------------------------------


https://github.com/heartcombo/simple_form


---


Learn ruby lessons
------------------


https://www.youtube.com/channel/UCuEXLUx21ofCvFx8wFwtfNQ/videos


---


Check later
-----------

https://www.youtube.com/watch?v=sVJRkTxqlSQ


---


Rails app for learn coding
--------------------------

https://github.com/DefactoSoftWare/Hours/
https://happyhours.io/


---


Build with Ruby on Rails
------------------------

https://web-crunch.com/collections/lets-build-with-ruby-on-rails


---


Hello rails
-----------

https://hellorails.io/
https://www.youtube.com/playlist?list=PL01nNIgQ4uxNkDZNMON-TrzDVNIk3cOz4


---


Sidekiq guide
-------------

https://github.com/virtualforce/rails_sidekiq_guide


---


Json API
--------

https://jsonapi.org/


---


Ruby Geocoder
-------------

http://www.rubygeocoder.com/


---


google-maps project credentials and guides links
------------------------------------------------

https://console.cloud.google.com/apis/credentials?hl=ru&project=g-maps-307916&angularJsUrl=%2Fprojectselector%2Fapis%2
Fcredentials%3Fhl%3Dru%26supportedpurview%3Dproject%26project%3Dg-maps-307916&folder=&organizationId=&supportedpurview=project


https://github.com/apneadiving/Google-Maps-for-Rails/wiki/Change-handler-behavior
http://underscorejs.org/



---


Ruby Pattetrns
--------------

http://refactoring guru/ru/design-patterns
http://sandimetz.com/99bottles
http://www.poodr.com



---


Docker
------

https://www.youtube.com/playlist?list=PL8D2POruohOA4Y9LQoTttfSqsRwUGWpu6
https://lipanski.com/posts/dockerfile-ruby-best-practices
https://evilmartians.com/chronicles/ruby-on-whales-docker-for-ruby-rails-development
https://docs.docker.com/


---


Dry Rails
---------

https://dry-rb.org/


---


Rails Templates
---------------

https://www.railsbytes.com/public/templates



---


Placeholders for layouts
------------------------

https://placeholder.com/



---


Safe fonts for difficult borwsers
---------------------------------

https://www.w3schools.com/cssref/css_websafe_fonts.php



---


Fast deploy
-----------

https://www.netlify.com/



---



UI/UX designed templates from figma
-----------------------------------

https://www.templatefreebies.com/




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------
Frontand resources
------------------

css web helper
--------------

https://cssmatic.com


---



Bulma - CSS based frontand framework
------------------------------------

https://bulma.io/documentation/overview/start/


--


Sass
----

Sass tool
---------

https://github.com/thoughtbot/bourbon#installation


---


Sass basics
-----------

https://sass-lang.com/guide


---


Atom IDE constamization
-----------------------

https://www.material-theme.com/docs/configuration/icons-settings/


---


CSS
---

CSS :hover transitions
----------------------

http://shpargalkablog.ru/2011/07/transformaciya-css.html


---


css web helper
--------------

https://cssmatic.com/


---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------
Get API key for Stripe
----------------------


https://www.ultrahook.com/

echo "api_key: PU6UGaBRGNKO65dcvhSAChdoxkxjSJr4" > ~/.ultrahook

PU6UGaBRGNKO65dcvhSAChdoxkxjSJr4


---


Stripe docs
-----------

https://stripe.com/docs/webhooks#signatures


---


Stripe documentation
--------------------

https://dashboard.stripe.com/test/dashboard
https://dashboard.stripe.com/test/webhooks/we_1IQb1PAikeNSsMWCZHXNF934


---


Stripe API
----------

https://stripe.com/docs/api/customers/create


---


Get api key on UltraHook
------------------------

https://www.ultrahook.com/register


---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------
Deploing rails app on heroku
----------------------------


1) heroku apps:create rails-geo-example
2) heroku open
3) git remote -v
4) git push heroku master
5) heroku rails db:migrate
   heroku run rails db:create
6) heroku logs
7) https://rails-geo-example.herokuapp.com/
8) https://git.heroku.com/rails-geo-example.git





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------
Deploy app to heroku
--------------------

---1---

$ heroku apps:create rails-location-detect



---2---

$ heroku open



---3---

$ git remote -v

heroku  https://git.heroku.com/rails-location-detect.git (fetch)
heroku  https://git.heroku.com/rails-location-detect.git (push)
origin  git@github.com:TheGor-365/location_detect.git (fetch)
origin  git@github.com:TheGor-365/location_detect.git (push)


---4---

$ git status



---5---

$ git push heroku master


---6---

$ heroku run rails db:create
$ heroku run rails db:migrate



https://rails-location-detect.herokuapp.com/ deployed to Heroku




---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------
Set your master key in production (heroku example)
--------------------------------------------------


$ heroku config:set RAILS_MASTER_KEY=YOURMASTERKEY
$ heroku config:set RAILS_MASTER_KEY=`cat config/master.key`





---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------
Getting API's for oath_app
--------------------------


Add to Gemfile
--------------
       
gem 'omniauth'
gem 'omniauth-facebook'
gem 'omniauth-github', github: 'omniauth/omniauth-github', branch: 'master'
gem 'omniauth-google-oauth2'
gem "omniauth-rails_csrf_protection"
gem 'activerecord-session_store'
gem 'devise', github: 'heartcombo/devise', branch: 'ca-omniauth-2'


---


devise for omniauth helper stachoverflow
----------------------------------------

https://stackoverflow.com/questions/65702896/latest-omniauth-facebook-gem-breaks-devise


---


Credentials for Rails 6
-----------------------

https://dev.to/yarotheslav/ruby-on-rails-6-credentials-quick-guide-2g8i


-----
OAUTH
-----


---1---

Facebook for developers
https://developers.facebook.com/apps/427450925200664/settings/basic/

Facebook App ID:
427450925200664

Secret key:
9da417863abd3abf9865ec583d06a6bb


---2---

GitHub for developers:
https://github.com/settings/applications/1495661


Authorization callback URL: 
http://localhost:3000/users/auth/github/callback


Client ID:
312477946ec39dcb80ac


Client secrets:
138f3ef1603fe6759819167dcbc5fd63393dfb73


---3---

Google
https://console.cloud.google.com/apis/dashboard?pli=1&project=property-finder-289221&folder=&organizationId=


API key:
AIzaSyDGGhIBg984-J2vyWdsVznEpG2rf0Zk1c8


Authorization callback URL: 
http://localhost:3000/users/auth/google_oauth2/callback


Client ID:
351657204801-oao6uomlmhqv2a9l3fupurjb444hqnds.apps.googleusercontent.com


Client secret:
R7s767hu79i4UvV8yFzyRCEi


---4---

C:\Projects\rails_basics\oauth_app\config\credentials.yml.enc
-------------------------------------------------------------


For edit vim file
-----------------

$ EDITOR=vim rails credentials:edit

press i and add changes


---


When done
---------

press ESC + :wq + ENTER to exit with saving
or
press ESC + :q! + ENTER to exit without saving 


File encrypted and saved.


---5---

$ rails credentials:show

C:\Users\74955\AppData\Local\Temp\656.credentials.yml
-----------------------------------------------------

facebook:
  facebook_client_id: 427450925200664
  facebook_client_secret: 9da417863abd3abf9865ec583d06a6bb

github:
  github_client_id: 312477946ec39dcb80ac
  github_client_secret: 138f3ef1603fe6759819167dcbc5fd63393dfb73

google:
  google_client_id: 351657204801-oao6uomlmhqv2a9l3fupurjb444hqnds.apps.googleusercontent.com
  google_client_secret: R7s767hu79i4UvV8yFzyRCEi

secret_key_base: 23960f33178f13b9ded84bbb7c5aaa28625fbc6167f2c7e1c20da0adb2dd9b4b965d2768c1fc4f502b90256de18098e5b341b5e856f166fddc01914e02c9c8d6


---


$ rails c

> Rails.application.credentials.dig(:facebook, :facebook_client_secret)     

=> "9da417863abd3abf9865ec583d06a6bb"


---7---

C:\Projects\rails_basics\oauth_app\config\initializers\devise.rb
----------------------------------------------------------------
                                                       
#config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'

  config.omniauth :facebook, Rails.application.credentials.dig(:facebook, :facebook_client_id),
  Rails.application.credentials.dig(:facebook, :facebook_client_secret), scope: 'public_profile,email'

  config.omniauth :github, Rails.application.credentials.dig(:github, :github_client_id),
  Rails.application.credentials.dig(:github, :github_client_secret), scope: 'user,public_repo'

  config.omniauth :google_oauth2, Rails.application.credentials.dig(:google, :google_client_id),
  Rails.application.credentials.dig(:google, :google_client_secret), scope: 'userinfo.email,userinfo.profile'


---8---

$ cd 'c:\Projects\rails_basics\oauth_app\config\initializers\session_store.rb'
                                                             
Rails.application.config.session_store :active_record_store, key: '_devise_omniauth_session'


---9---

$ rails g migration update_users

  invoke  active_record
  create    db/migrate/20210312165207_update_users.rb


class UpdateUsers < ActiveRecord::Migration[6.0]
  def change
    add_column :users, :provider, :string, limit: 50, null: false, default: ''
    add_column :users, :uid, :string, limit: 500, null: false, default: ''
  end
end


$ rails g migration create_sessions

  invoke  active_record
  create    db/migrate/20210312165940_create_sessions.rb


class CreateSessions < ActiveRecord::Migration[6.0]
  def change
    create_table :sessions do |t|
      t.string :session_id, null: false
      t.text :data

      t.timestamps
    end
    add_index :sessions, :session_id, unique: true
    add_index :sessions, :updated_at
  end
end


$ rails db:migrate


---10---

C:\Projects\rails_basics\oauth_app\app\models\user.rb
-----------------------------------------------------

class User < ApplicationRecord

  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable

  devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :validatable, :omniauthable,
  omniauth_providers: [ :facebook, :github, :google_oauth2 ]

  def self.create_from_provider_data(provider_data)
    where(provider: provider_data.provider, uid: provider_data.uid).first_or_create do |user|
      user.email = provider_data.info.email
      user.password = Devise.friendly_token[ 0, 20 ]
    end
  end
end


---11---

$ rails g controller omniauth


---12---

C:\Projects\rails_basics\oauth_app\app\controllers\omniauth_controller.rb
-------------------------------------------------------------------------

class OmniauthController < ApplicationController

  def facebook
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Facebook. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def github
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Github. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def google_oauth2
    @user = User.create_from_provider_data(request.env['omniauth.auth'])

    if @user.persisted?
      sign_in_and_redirect @user
    else
      flash[:error] = 'There was a problem signing you in through Google. Please register or try signing in later.'
      redirect_to new_user_registration_url
    end
  end

  def failure
    flash[:error] = 'There was a problem signing you in. Please register or signing in later.'
    redirect_to new_user_registration_url
  end
end


---13---

C:\Projects\rails_basics\oauth_app\app\views\devise\shared\_links.html.erb
--------------------------------------------------------------------------

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post, class: 'text-decoration-none' %><br />
  <% end %>
<% end %>


add
---

method: :post / button_to


customize devise pages!


---14---

routes.rb
---------

Rails.application.routes.draw do

  devise_for :users, controllers: { omniauth_callbacks: 'omniauth' }
  root to: 'public#home'

end





---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------
OmniAuth Facebook for insta_clone
---------------------------------

---1---

gem 'omniauth-facebook'

https://github.com/simi/omniauth-facebook
https://medium.com/@jvanier/omniauth-on-rails-4e0180e6a69e
https://www.youtube.com/watch?v=Dd8dOAL6WYs


---2---

$ rails g migration AddOmniauthToAccounts provider:string uid:string


---3---

$ rake db:migrate


---4---

config.omniauth :facebook, 'APP_ID', 'APP_SECRET'


gem 'omniauth-facebook', '~> 8.0'
gem "omniauth", "~> 1.9.1"

https://developers.facebook.com/


---5---

class Accounts::OmniauthCallbacksController < Devise::OmniauthCallbacksController

  def facebook
    @account = Account.from_omniauth(request.env['omniauth.auth'])

    if @account.persisted?
      sign_in_and_redirect @account, event: :authentication
      set_flash_message(:notice, :success, kind: 'Facebook') if is_navigational_format?
    else
      session['devise.facebook_data'] = request.env['omniauth.auth']
      redirect_to new_account_registration_url
    end
  end

  def failure
    redirect_to root_path
  end

end


https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------
Oauth authentication tutorial
-----------------------------

ruby gem for oauth authentication
---------------------------------


https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview
https://github.com/cookpad/omniauth-rails_csrf_protection

gem "omniauth-rails_csrf_protection"


---


Devise Authentication Guide with GitHub OmniAuth for Rails Application (tutorial)
---------------------------------------------------------------------------------

https://salmaeng71.medium.com/devise-authentication-guide-with-github-omniauth-for-rails-application-220aa52d5b82


---


Oauth: list of strategies guide
-------------------------------

https://github.com/omniauth/omniauth/wiki/List-of-Strategies


---


OmniAuth with multiple models guide
-----------------------------------

https://github.com/heartcombo/devise/wiki/OmniAuth-with-multiple-models


---


github_login app oauth callback path
------------------------------------

http://localhost:3000/users/auth/github/callback


---


Oauth twitter for Rails app
---------------------------

$ bundle add omniauth-twitter omniauth-rails_csrf_protection




---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------
Devise LDAP
-----------


https://github.com/cschiewek/devise_ldap_authenticatable



1. Edit Gemfile
---------------

gem 'devise'
gem 'devise_ldap_authenticatable'



2. Setup Devise and Devise LDAP
-------------------------------

$ bundle exec rails g devise:install                            --- Install Devise
$ bundle exec rails g devise User                               --- Create User Model
$ bundle exec rails g devise_ldap_authenticatable:install       --- Install Devise LDAP



3. Edit User Model
------------------

# app/models/user.rb

class User < ApplicationRecord
  devise :ldap_authenticatable, :rememberable, :trackable
end



4. Edit Migration File
----------------------

# db/migrate/XXXXXXXXXX_devise_create_users.rb



5. Initial settings for Devise
------------------------------

# config/initializers/devise.rb

config.ldap_logger = true                                         --- Enable logging LDAP Query
config.ldap_create_user = true                                    --- All valid AD users can log in and automatically create user records.
config.ldap_update_password = false                               --- Make sure that password change is not written back to AD.
config.ldap_use_admin_to_bind = true                              --- Use Administrator in bind at the time of LDAP authentication.
config.authentication_keys = [:username]                          --- Key used for authentication. This time, use the username of the User model.
config.case_insensitive_keys = [:username]                        --- Does not distinguish case of key
config.strip_whitespace_keys = [:username]                        --- Delete the blanks contained in the key



6. ldap.yml Settings
--------------------

# config/ldap.yml

development:
  host: <YOUR DOMAIN CONTROLLER>
  port: 389
  attribute: sAMAccountName
  base: CN=Users,DC=example,DC=com
  admin_user: CN=Administrator,CN=Users,DC=example,DC=com
  admin_password: <admin_user password>
  ssl: false



7. Create and edit a View
-------------------------

$ bundle exec rails g devise:views users -v sessions

# app/views/users/sessions/new.html.erb

<h2>Log in</h2><%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
  <div class="field">
    <%= f.label :username, "Windows Account Name" %><br />
    <%= f.text_field :username, autofocus: true, autocomplete: "username" %>
  </div>  <div class="field">
    <%= f.label :password %><br />
    <%= f.password_field :password, autocomplete: "current-password" %>
  </div>  <% if devise_mapping.rememberable? %>
    <div class="field">
      <%= f.check_box :remember_me %>
      <%= f.label :remember_me %>
    </div>
  <% end %>  <div class="actions">
    <%= f.submit "Log in" %>
  </div>
<% end %><%= render "users/shared/links" %>



8. Generate a Controller
------------------------

$ bundle exec rails g devise:controllers users -c=sessions

# app/controllers/users/sessions_controller.rb

class Users::SessionsController < Devise::SessionsController
  before_action :configure_sign_in_params, only: [:create]

  # GET /resource/sign_in
  def new
    super
  end

  # POST /resource/sign_in
  def create
    super
  end

  # DELETE /resource/sign_out
  def destroy
    super
  endprotected

  # If you have extra params to permit, append them to the sanitizer.
  def configure_sign_in_params
    devise_parameter_sanitizer.permit(:sign_in, keys: [:username])
  end
end



9. Create a view to display after login
---------------------------------------

$ bundle exec rails g controller StaticPages home

# app/views/static_pages/home.html.erb

<h1>StaticPages#home</h1>
<p>Find me in app/views/static_pages/home.html.erb</p>
<p>Welcome <%= current_user.username %> !</p>
<%= link_to  "logout", destroy_user_session_path %>



10. Edit a routes
-----------------

# config/routes.rb

Rails.application.routes.draw do  
  get 'home', to: 'static_pages#home'  devise_for :users, controllers: {
    sessions: 'users/sessions'
  }  devise_scope :user do
    root to: 'users/sessions#new'
    get 'sign_in', to: 'users/sessions#new'
    get '/users/sign_out', to: 'users/sessions#destroy'
  end
end


# app/controllers/application_controller.rb

class ApplicationController < ActionController::Base
  rescue_from DeviseLdapAuthenticatable::LdapException do |exception|
    render :text => exception, :status => 500
  end  def after_sign_in_path_for(resource)
    home_path
  end
end



11. Do login
------------

# localhost:3000

$ bundle exec rails s



# app/controllers/static_pages_controller.rb

class StaticPagesController < ApplicationController
  before_action :authenticate_user!
  
  def home
  end
end





---------------------------------------------------------------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------
Rails 6 (and 5): User Accounts with 3 types of Roles – Devise, Rails Admin, CanCanCan
-------------------------------------------------------------------------------------


https://altalogy.com/blog/rails-6-user-accounts-with-3-types-of-roles/


---


Admin Users – Rails Admin gem
-----------------------------

---1---

gem 'rails_admin', git: 'https://github.com/sferik/rails_admin.git'


---2---

$ bundle install
$ rails g rails_admin:install


---3---

config/initializers/rails_admin.rb
----------------------------------

class Ball < ActiveRecord::Base
  validates :name, presence: true
  belongs_to :player

  rails_admin do
    configure :player do
      label 'Owner of this ball: '
    end
  end
end


---4---

http://localhost:3000/admin


---


Authorization – CanCanCan
-------------------------

---1---

gem 'cancancan'


---2---

$ bundle install


---3---

$ rails g cancan:ability


---4---

$ touch models/ability.rb


---5---

$ rails generate migration add_roles_to_users superadmin_role:boolean supervisor_role:boolean user_role:boolean


---6---

Open db/migrate/xxx_add_roles_to_users.rb and adjust the code
-------------------------------------------------------------

def change
  add_column :users, :superadmin_role, :boolean, default: false
  add_column :users, :supervisor_role, :boolean, default: false
  add_column :users, :user_role, :boolean, default: true
end

$ rake db:migrate


To verify current user’s role, you can use
------------------------------------------

current_user.superadmin_role?
current_user.supervisor_role?
current_user.user_role?


---7---

Views:
------

<% if current_user.superadmin_role? || current_user.supervisor_role? %>
  <p>Visible only for superadmins and supervisors! </p>
<% end %>

<% if can? :manage, User %>
  <p>Visible only for superadmins and supervisors! </p>
<% end %>


---8---

And in app/model/ability.rb
---------------------------

class Ability
  include CanCan::Ability

  def initialize(user)
    # Define abilities for the passed in user here. For example:

    user ||= User.new # guest user (not logged in)
    
    if user.superadmin_role?
      can :manage, :all
    end
    
    if user.supervisor_role?
      can :manage, User
    end

  end
end


---


Controllers
-----------

---1---

To authorize user access to controller’s actions, let’s add the following to a specific controller
--------------------------------------------------------------------------------------------------

load_and_authorize_resource


---2---

Rails Admin and CanCanCan
-------------------------

configure config/initializers/rails_admin.rb
--------------------------------------------

config.authorize_with :cancan


---3---

modify app/model/ability.rb
---------------------------

user ||= User.new 

if user.superadmin_role?
  can :manage, :all
  can :access, :rails_admin       
  can :manage, :dashboard         
end

if user.supervisor_role?
  can :manage, User
end


---4---

Manage User accounts:
---------------------

add can :manage, :all for any user in app/models/ability.rb
-----------------------------------------------------------

user ||= User.new 

can :manage, :all  

if user.superadmin_role?
  can :manage, :all
  can :access, :rails_admin       
  can :manage, :dashboard         
end

if user.supervisor_role?
  can :manage, User
end


---5---

$ rails generate migration add_superadmin


---6---

def change
  User.create! do |u|
    u.email     = 'test_admin@test.com'
    u.password  = 'password'
    u.superadmin_role = true
  end
end


---7---

$ rails db:migrate



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------
Simple form Rails
-----------------


gem 'simple_form'

rails generate simple_form:install
rails generate simple_form:install --bootstrap
rails generate simple_form:install --foundation


http://simple-form-bootstrap.plataformatec.com.br/


---


Country Select
If you want to use the country select, you will need the country_select gem, add it to your Gemfile
---------------------------------------------------------------------------------------------------

gem 'country_select'


If you don't want to use the gem you can easily override this behaviour by mapping the country inputs to 
something else, with a line like this in your simple_form.rb initializer
------------------------------------------------------------------------

config.input_mappings = { /country/ => :string }



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------
Rails API - active_model_serializers
------------------------------------

https://github.com/rails-api/active_model_serializers


Gemfile
-------

gem 'active_model_serializers', '~> 0.10.2'

$ bundle


---


guide
-----

https://github.com/rails-api/active_model_serializers/tree/0-10-stable



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------
Look at Rails app routs
-----------------------

In browser
----------

http://localhost:3000/rails/info/routes


---


in terminal or console
----------------------

$ rails routes



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------
Adding TailwindCSS to your Rails 6 Project
------------------------------------------


---1---

$ yarn add tailwindcss


---2---

npx tailwindcss init
--------------------

module.exports = {
  purge: [],
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}

module.exports = {
  theme: {
    extend: {
      colors: {
        primary: {
          100: "#fef6eb",
          200: "#f7c686",
          300: "#f4b35d",
          400: "#f2aa49",
          500: "#f1a035",
          600: "#d99030",
          700: "#c1802a",
          800: "#a97025",
          900: "#916020",
        },
      },
    },
  },
  purge: {
    content: ["./app/**/*.html.erb"],
  }
};


---3---

adding tailwind to PostCSS config
---------------------------------

require("tailwindcss"),

here is an example of my postcss.config.js file

module.exports = {
  plugins: [
    require('postcss-import'),
    require('postcss-flexbugs-fixes'),
    require("tailwindcss"),
    require('postcss-preset-env')({
      autoprefixer: {
        flexbox: 'no-2009'
      },
      stage: 3
    })
  ]
}


---4---

Import tailwind to your Javascript Pack
---------------------------------------

$ touch javascript/layouts/application.css

@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";


app/javascript/packs/application.js
-----------------------------------

import  "../layouts/application.css";


---5---

Import Tailwind to your layout
------------------------------

<%=  stylesheet_pack_tag  'application',  media: 'all',  'data-turbolinks-track': 'reload'  %>




---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------
Add twitter-bootstrap to rails app
----------------------------------


---1---

$ yarn add bootstrap@4.5.2 jquery popper.js


---2---

add to environment.js
---------------------

const webpack = require("webpack")

environment.plugins.append("Provide", new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))


---3---

add to application.css
----------------------

*= require bootstrap
*= require_tree .
*= require_self





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------
Add jquery twitter-bootstrap and popper.js to rails app with yarn
-----------------------------------------------------------------


$ yarn add bootstrap jquery popper.js

@import 'bootstrap/scss/bootstrap';

require("bootstrap")


---


ADD JQUERY SNIPPET
------------------

const webpack = require('webpack')
environment.plugins.prepend('Provide',
  new webpack.ProvidePlugin({
    $: 'jquery/src/jpuery',
    jQuery: 'jquery/src/jpuery',
    Popper: ['popper.js', 'default']
  })
)



https://gist.github.com/nachozt/799a54c1bba79975bdcfd4f67226ce22





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------
Add bootstrap 4.5 to Rails app with yarn
----------------------------------------


---1---

---v1---

$ yarn add bootstrap jquery popper.js


---v2---

$ yarn add bootstrap jquery @popperjs/core@2.0.0-alpha.1



---2---

add the following to config/webpack/environment.js
--------------------------------------------------

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))



---3---

app/javascript/packs/application.js
-----------------------------------

import 'bootstrap'

document.addEventListener("turbolinks:load", () => {
  $('[data-toggle="tooltip"]').tooltip();
  $('[data-toggle="popover"]').popover()
})

window.jQuery = $;
window.$ = $;



---4---

Create folder and new .scss file
--------------------------------

$ mkdir app/javascript/stylesheets && touch app/javascript/stylesheets/application.scss



---5---

app/javascript/stylesheets/application.scss
-------------------------------------------

@import "~bootstrap/scss/bootstrap";



---6---

app/javascript/packs/application.js
-----------------------------------

import '../stylesheets/application'



---7---

application.html.erb
--------------------

<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>  
<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>



---8---

config/webpacker.yml
--------------------

resolved_paths: ['app/assets']





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------
Add bootstrap 5 to Rails 6 app
------------------------------


https://bootrails.com/blog/rails-bootstrap-tutorial


---1---

$ yarn add bootstrap@5.0.0-beta2 && yarn add @popperjs/core@2.0.0-alpha.1 && yarn add jquery


add the following to config/webpack/environment.js
--------------------------------------------------

const webpack = require('webpack')
environment.plugins.append('Provide', new webpack.ProvidePlugin({
  $: 'jquery',
  jQuery: 'jquery',
  Popper: ['popper.js', 'default']
}))



---2---

$ mkdir app/javascript/js && touch app/javascript/js/bootstrap_js_files.js



---3---

add bootstrap 5 js
------------------

app/javascript/js/bootstrap_js_files.js
---------------------------------------

import 'bootstrap/js/src/collapse'  
import 'bootstrap/js/src/dropdown'  
import 'bootstrap/js/src/scrollspy'  
import 'bootstrap/js/src/alert'  
import 'bootstrap/js/src/button'  
import 'bootstrap/js/src/carousel'  
import 'bootstrap/js/src/modal'  
import 'bootstrap/js/src/popover'  
import 'bootstrap/js/src/tab'  
import 'bootstrap/js/src/toast'  
import 'bootstrap/js/src/tooltip'



---4---

app/javascript/packs/application.js
-----------------------------------

import '../js/bootstrap_js_files.js'

window.jQuery = $;
window.$ = $;



---5---

add bootstrap 5 scss
--------------------

$ touch app/javascript/packs/application.scss


app/javascript/packs/application.scss
-------------------------------------

@import "~bootstrap/scss/bootstrap";



---6---

application.html.erb
--------------------

<%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>





---------------------------------------------------------------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------
Add bootstrap 5 icons with yarn for Rails 6 app version_1
---------------------------------------------------------

---1---

$ yarn add bootstrap-icons


---2---

app/helpers/application_helper.rb
---------------------------------

module ApplicationHelper
  def icon(icon, options = {})
    file = File.read("node_modules/bootstrap-icons/icons/#{icon}.svg")
    doc = Nokogiri::HTML::DocumentFragment.parse file
    svg = doc.at_css 'svg'
    if options[:class].present?
      svg['class'] += " " + options[:class]
    end
      doc.to_html.html_safe
  end
end


---3---

view.html.erb
-------------

<%= icon("bicycle", class: "text-success") %>


---4---

Find Icon:
----------

https://icons.getbootstrap.com/


Add bootstrap 5 icons with yarn for Rails 6 app version_2
---------------------------------------------------------

---1---

$ yarn add bootstrap-icons


---2---

application.js
--------------

import 'bootstrap-icons/font/bootstrap-icons.css'


---3---

view.html.erb
-------------

<i class="bi bi-plus-circle"></i>


---4---

Find Icon
---------

https://icons.getbootstrap.com/





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------
Add bootstrap 5 to rails 7 without node.js app guide
----------------------------------------------------

---1---

Add gems to Gemfile
-------------------

gem "sassc-rails"
gem 'bootstrap', '~> 5.1.3'



---2---

$ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss



---3---

$ echo -n "" > app/assets/stylesheets/application.scss && echo "@import 'bootstrap';" >> app/assets/stylesheets/application.scss



---4---

$ rails assets:precompile



---5---

Find ( Ctrl + P ) config/initializers/assets.rb
-----------------------------------------------

Rails.application.config.assets.precompile += %w( bootstrap.min.js popper.js )



---6---

Find ( Ctrl + P ) config/importmap.rb
-------------------------------------

pin "popper", to: 'popper.js', preload: true
pin "bootstrap", to: 'bootstrap.min.js', preload: true



---7---

Find ( Ctrl + P ) app/javascript/application.js
-----------------------------------------------

import "popper"
import "bootstrap"





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------
Add bootstrap 5 to rails 7 with node.js, yarn, jquery guide
-----------------------------------------------------------

---1---

$ rails new rails_with_jQuery_bootstrap -j esbuild --css bootstrap
$ cd rails_with_jQuery_bootstrap



---2---

$ yarn add jquery



---3---

$ touch app/javascript/add_jquery.js
$ echo "import jquery from 'jquery'" >> app/javascript/add_jquery.js && echo "window.jQuery = jquery" >> app/javascript/add_jquery.js && echo "window.$ = jquery" >> app/javascript/add_jquery.js



---4---

$ $ echo "import './add_jquery'" >> app/javascript/application.js





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------
Add bootstrap 5 to rails 7 with node.js, yarn, jquery and jquery-ui guide
-------------------------------------------------------------------------

---1---

$ rails new jquery-example -j esbuild --css bootstrap --database=postgresql
$ cd jquery-example



---2---

$ yarn add jquery 



---3---

$ mkdir app/javascript/src && touch app/javascript/src/jquery.js && touch app/javascript/src/jquery-ui.js && touch app/stylesheets/jquery-ui.css
$ echo "import jquery from 'jquery'" >> app/javascript/src/jquery.js && echo "window.jQuery = jquery" >> app/javascript/src/jquery.js && echo "window.$ = jquery" >> app/javascript/src/jquery.js



---4---

$ echo 'import "./src/jquery"' >> app/javascript/application.js && echo "import './src/jquery-ui'" >> app/javascript/application.js



---5---

$ echo "@import 'jquery-ui';" >> app/assets/stylesheets/application.bootstrap.scss



---6---

https://jqueryui.com/





---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------
Bootstrap-datepicker-rails
--------------------------


https://github.com/Nerian/bootstrap-datepicker-rails


---1---


Include bootstrap-datepicker-rails in Gemfile
---------------------------------------------

gem 'bootstrap-datepicker-rails'


or you can install from latest build
------------------------------------


gem 'bootstrap-datepicker-rails', :require => 'bootstrap-datepicker-rails',
                              :git => 'git://github.com/Nerian/bootstrap-datepicker-rails.git'



---2---


$ bundle install


---3---


Add this line to app/assets/stylesheets/application.css
-------------------------------------------------------


*= require bootstrap-datepicker

# Or if using bootstrap v3:
*= require bootstrap-datepicker3


---4---


Add this line to app/assets/javascripts/application.js
------------------------------------------------------


//= require bootstrap-datepicker



---5---


Using bootstrap-datepicker-rails
--------------------------------


---v1---


use the simple data-provide='datepicker' attribute
--------------------------------------------------

<input type="text" data-provide='datepicker' >


---v2---


Or call datepicker() with any selector
--------------------------------------

<input type="text" class='datepicker' >

<script type="text/javascript">

  $(document).ready(function(){
    $('.datepicker').datepicker();
  });
</script>



---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------
Bootstrap 6 dropdown snippet
----------------------------

<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingOne">
      <button 
        class="accordion-button" 
        type="button" 
        data-bs-toggle="collapse" 
        data-bs-target="#collapseOne" 
        aria-expanded="true" 
        aria-controls="collapseOne"
      >
        Accordion Item #1
      </button>
    </h2>
    <div 
      id="collapseOne" 
      class="accordion-collapse collapse show" 
      aria-labelledby="headingOne" 
      data-bs-parent="#accordionExample"
    >
      <div class="accordion-body">
        <strong>This is the first item
      </div>
    </div>
  </div>
</div>




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------
How to Upgrade Rails app
------------------------


---1---

Install Ruby to appropriate version (`(rvm | rbenv) install `)
--------------------------------------------------------------

$ rvm install 3.0.0
$ gem install rails
$ ruby -v && rails -v



---2---

Add to Gemfile
--------------

ruby '3.0.0'
gem 'rails', '~> 7.0.2.2'



---3---

Update Gemfile
--------------

$ bundler update
$ bin/rails app:update




---------------
if got problems
---------------

---1---

config/initializers/activerecord_yaml.rb
----------------------------------------

ActiveRecord.use_yaml_unsafe_load = true


---2---

$ gem 'psych', '< 4'



---3---

module YAML
  def self.properly_load_file(path)
    YAML.load_file path, aliases: true
  rescue ArgumentError
    YAML.load_file path
  end
end



gems
----

ruby "3.1.2"
gem "rails", "~> 7.0.4", ">= 7.0.4.1"
gem "sprockets-rails"
gem "pg", "~> 1.1"
gem "puma", "~> 5.0"
gem "jsbundling-rails"
gem "turbo-rails"
gem "stimulus-rails"
gem "cssbundling-rails"
gem "jbuilder"
gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
gem "bootsnap", require: false

# gem "sassc-rails"
# gem "redis", "~> 4.0"
# gem "kredis"
# gem "bcrypt", "~> 3.1.7"
# gem "image_processing", "~> 1.2"

group :development, :test do
  gem "debug", platforms: %i[ mri mingw x64_mingw ]
end

group :development do
  gem "web-console"

  # gem "rack-mini-profiler"
  # gem "spring"
end

group :test do
  gem "capybara"
  gem "selenium-webdriver"
  gem "webdrivers"
end


layouts/application.html.erb
----------------------------

<%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
<%= javascript_include_tag "/assets/application.js", "data-turbo-track": "reload", defer: true %>


---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------
Database.yml config template
----------------------------

default: &default
  adapter: postgresql
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000
  username: postgres
  host: localhost
  port: 5432

development:
  <<: *default
  database: ruby_gt

test:
  <<: *default
  database: ruby_gt_test

production:
  <<: *default
  database: ruby_gt_pro


https://betterprogramming.pub/devise-auth-setup-in-rails-7-44240aaed4be

---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------
Create new Rails app with pg
----------------------------

$ rails new myapp --database=postgresql -j esbuild --css bootstrap
$ rails new tailwind_rails --database=postgresql -c tailwind -j esbuild
$ rails new quote-editor --css=sass --javascript=esbuild --database=postgresql



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------
Font-awesome in a Rails 6 application with yarn
-----------------------------------------------

---1---

$ yarn add @fortawesome/fontawesome-free


---2---

application.js
--------------

import "@fortawesome/fontawesome-free/css/all.css"



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------
Add flash messages to Rails app with toastr guide
-------------------------------------------------

---1---

$ yarn add toastr


---2---

app/javascript/packs/application.js
-----------------------------------

global.toastr = require("toastr")


---3---

$ mkdir app/javascript/stylesheets && touch app/javascript/stylesheets/application.scss

                                 
import in app/javascript/stylesheets/application.scss
-----------------------------------------------------

@import 'toastr';


---4---

app/javascript/packs/application.js
-----------------------------------

import "../stylesheets/application"


---5---

application_helper.rb
---------------------

def toastr_flash
  flash.each_with_object([]) do |(type, message), flash_messages|
    type = 'success' if type == 'notice'
    type = 'error' if type == 'alert'
    text = "<script>toastr.#{type}('#{message}', '', { closeButton: true, progressBar: true })</script>"
    flash_messages << text.html_safe if message
  end.join("\n").html_safe
end


---6---

layouts/application.html.erb
----------------------------

<%= toastr_flash %>


Toastr for flash messages in app links
--------------------------------------

https://github.com/CodeSeven/toastr
https://stackoverflow.com/questions/58777081/how-do-you-add-toastr-rails-gem-to-rails-6-project





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------
Flash messages for Rails app
----------------------------

Gemfile:
--------

gem 'flash_rails_messages'


layout.html.erb
---------------

<%= render_flash_messages %>
<%= render_flash_messages dismissible: true %>
<%= render_flash_messages dismissible: true, id: 'my-alert', class: 'custom-class' %>





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------
Input notice and alert to Rails app
-----------------------------------

application.html.erb
--------------------

---v1---

<% if notice.present? %>
  <div class="container alert alert-success">
    <%= notice %>
  </div>
<% end %>

<% if alert.present? %>
  <div class="container alert alert-danger">
    <%= alert %>
  </div>
<% end %>


---v2---

<% case @info %>
<% when notice.present? %>

  <% @info = notice %>
  
  <div class="container alert alert-success">
    <%= @info %>
  </div>
<% when alert.present? %>

  <% @info = alert %>
  
  <div class="container alert alert-danger">
    <%= @info %>
  </div>
<% end %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------
Simple Devise guide for Rails 6 app
-----------------------------------

gem 'devise'


---1---

$ rails generate devise:install



---2---

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }



---3---

$ rails generate devise User
$ rails db:migrate



---4---

Add to controller
-----------------

before_action :authenticate_user!



---5---

Devise Helpers
--------------

1. user_signed_in?
2. current_user
3. user_session
4. after_sign_in_path_for
5. after_sign_out_path_for
6. after_sign_up_path_for



---6---

Configures
----------

devise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13



---7---

Strong Parameters
-----------------

ApplicationController
---------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters
  devise_parameter_sanitizer.permit(:sign_up, keys: [:username])
  devise_parameter_sanitizer.permit(:account_update, keys: [:username])
end



---8---

$ rails generate devise:views


scoped views
------------

$ rails generate devise:views users


ones for the registerable and confirmable module:
-------------------------------------------------

$ rails generate devise:views -v registrations confirmations



---9---

Configuring controllers
-----------------------

$ rails generate devise:controllers [scope]


devise_for :users, controllers: { sessions: 'users/sessions' }


Copy the views from devise/sessions to users/sessions. Since the controller was changed, it won't use the default views located in devise/sessions


class Users::SessionsController < Devise::SessionsController
  def create
    # custom sign-in code
  end
end



---10---

Configuring routes
------------------

devise_for :users, path: 'auth', path_names: { 
  sign_in: 'login', sign_out: 'logout', password: 'secret', confirmation: 'verification', unlock: 'unblock', registration: 'register', sign_up: 'cmon_let_me_in' 
}


devise_scope :user do
  get 'sign_in', to: 'devise/sessions#new'
end


devise_for :users, skip: :all




https://github.com/heartcombo/devise





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------
Add devise for User with sign_in by username or email (login)
-------------------------------------------------------------

---1---

Add devise gem to Gemfile
-------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address


gem 'devise'



---2---

$ rails g devise:install

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }



devise methods
--------------

before_action :authenticate_user!
user_signed_in?
current_user
user_session
after_sign_in_path_for
after_sign_up_path_for
after_sign_out_path_for



---3---

$ rails g devise User



---4---

$ rails db:migrate



---5---

Add username column to Users
----------------------------

$ rails generate migration add_username_to_users username:string:uniq
$ rake db:migrate



---6---

Add strong params to application_controller.rb
----------------------------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters

  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me]
  
  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end



---7---

Create a login virtual attribute in the User model
--------------------------------------------------

app/models/user.rb
------------------

attr_writer :login

def login
  @login || self.username || self.email
end



---8---

config/initializers/devise.rb
-----------------------------

config.authentication_keys = [ :login ]


If you are using multiple models with Devise
--------------------------------------------

devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :trackable, 
  :validatable, authentication_keys: [:login]


If you need permissions
-----------------------

devise :database_authenticatable, :registerable,
  :recoverable, :rememberable, :trackable, 
  :validatable, :authentication_keys => { email: true, login: false }



---9---

Overwrite Devise's find_for_database_authentication method in User model
------------------------------------------------------------------------

app/models/user.rb
------------------

def self.find_for_database_authentication(warden_conditions)

  conditions = warden_conditions.dup

  if login = conditions.delete(:login)
    where(conditions.to_h).where(["lower(username) = :value OR lower(email) = :value", { :value => login.downcase }]).first
  elsif conditions.has_key?(:username) || conditions.has_key?(:email)
    where(conditions.to_h).first
  end
end



---10---

Validate username
-----------------

app/models/user.rb
------------------

validate :validate_username

def validate_username
  if User.where(email: username).exists?
    errors.add(:username, :invalid)
  end
end



---11---

---v1---

$ rails g devise:views


---v2---

$ rails g devise:views users


Devise views
------------

shared/_links.html.erb
----------------------

<%- if controller_name != 'sessions' %>
  <%= link_to "Sign in", new_session_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name), class: 'text-decoration-none text-dark' %><br />
<% end %>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), method: :post, class: 'text-decoration-none text-dark' %><br />
  <% end %>
<% end %>


---


sessions/new.html.erb
---------------------

<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-7">
      <div class="card p-5">
        <h5>Sign in</h5>

        <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
        
          <div class="form-group">
            <%= f.label :login %>
            <%= f.text_field :login, class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password %>
            <%= f.password_field :password, class: 'form-control' %>
          </div>

          <% if devise_mapping.rememberable? %>
            <div class="form-group">
              <%= f.check_box :remember_me %>
              <%= f.label :remember_me %>
            </div>
          <% end %>

          <div class="form-group">
            <div class="row ml-1">
              <%= f.submit "Sign in", class: 'btn btn-success btn-sm mr-2' %>
            </div>
          </div>

        <% end %>
      </div>
    </div>
  </div>

  <div class="row mt-5">
    <div class="col-6">
      <div class="card p-5">
        <small><%= render "devise/shared/links" %></small>
      </div>
    </div>
  </div>
</div>


---


descriptions/new.html.erb
-------------------------

<div class="container mt-5 mb-5">
  <div class="row">
    <div class="col-6">
      <div class="card p-5">
        <h5>Sign up</h5>

        <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
          <%= render "devise/shared/error_messages", resource: resource %>

          <div class="form-group">
            <%= f.label :email %>
            <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :username %>
            <%= f.text_field :username, class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password %>
            <% if @minimum_password_length %>
            <small class="text-muted">(<%= @minimum_password_length %> characters minimum)</small>
            <% end %>
            <%= f.password_field :password, autocomplete: "new-password", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.label :password_confirmation %>
            <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'form-control' %>
          </div>

          <div class="form-group">
            <%= f.submit "Sign up", class: 'btn btn-success btn-sm' %>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <div class="row mt-5">
    <div class="col-6">
      <div class="card p-5">
        <small><%= render "devise/shared/links" %></small>
      </div>
    </div>
  </div>
</div>


---


registrations/edit.html.erb
---------------------------

<div class="edit-page pt-5 pb-5">

  <div class="container">
    <div class="row">
      <div class="col-6">
        <div class="card p-5">
          <h5>Edit <%= resource_name.to_s.humanize %></h5>

          <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
            <%= render "devise/shared/error_messages", resource: resource %>

            <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
            <div>Currently waiting confirmation for: <%= resource.unconfirmed_email %></div>
            <% end %>

            <div class="form-group">
              <%= f.label :email %>
              <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :username %>
              <%= f.text_field :username, class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :password %> <small class="text-muted">(leave blank if you don't want to change it)</small>
              <%= f.password_field :password, autocomplete: "new-password", class: 'form-control' %>
              <% if @minimum_password_length %>
                <small class="text-muted"><%= @minimum_password_length %> characters minimum</small>
              <% end %>
            </div>

            <div class="form-group">
              <%= f.label :password_confirmation %>
              <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.label :current_password %><br> <small class="text-muted">(we need your current password to confirm your changes)</small>
              <%= f.password_field :current_password, autocomplete: "current-password", class: 'form-control' %>
            </div>

            <div class="form-group">
              <%= f.submit "Update", class: 'btn btn-success btn-sm' %>
            </div>
          <% end %>
        </div>
      </div>
    </div>

    <div class="row mt-5">
      <div class="col-6">
        <div class="card p-5">
          <small><%= link_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete, class: 'text-decoration-none text-danger' %></small>
        </div>
      </div>
    </div>
  </div>

</div>



---12---


sessions/new.html.erb
---------------------

<%= f.label :login %>
<%= f.text_field :login %>

or

<%= f.label :username %>
<%= f.text_field :username %>


registrations/edit.html.erb
---------------------------

<%= f.label :username %>
<%= f.text_field :username %>



---13---

$ rails db:migrate



---14---

Configure Devise to use username as reset password or confirmation keys
-----------------------------------------------------------------------

config/initializers/devise.rb
-----------------------------

config.reset_password_keys = [ :username ]
config.confirmation_keys = [ :username ]



---15---

redirect to a specific page on successful sign in out
-----------------------------------------------------

def after_sign_in_path_for(resource)
 current_user_path
end


Keeping user on the same page after signing out
-----------------------------------------------

def after_sign_out_path_for(resource_or_scope)
 request.referrer
end


redirect to special page on signe_up
------------------------------------

$ touch controllers/registrations_controller.rb


add
---

class RegistrationsController < Devise::RegistrationsController
  protected

  def after_sign_up_path_for(resource)
    '/path' 
  end
end


If the account that is registered is confirmable and not active yet
-------------------------------------------------------------------

class RegistrationsController < Devise::RegistrationsController
  protected

  def after_inactive_sign_up_path_for(resource)
    '/path' 
  end
end



---16---

routes.rb
---------

devise_for :users, :controllers => {:registrations => "registrations"}



---17---

Guest user guide
----------------

https://github.com/heartcombo/devise/wiki/How-To:-Create-a-guest-user



---18---

Notify users via email when their passwords change
--------------------------------------------------

config/initializers/devise.rb
-----------------------------

config.send_password_change_notification = true

!!! You can customize the password change email by editing the devise/mailer/password_change.html.erb template



---19---

Customize minimum password length
---------------------------------

---v1---

config/initializers/devise.rb
-----------------------------

config.password_length = 10


---v2---

user.rb
-------

devise :database_authenticatable, :validatable, password_length: 10



---20---

Add sign_in, sign_out, and sign_up links to your layout template
----------------------------------------------------------------

views/devise/menu/_login_items.html.erb
---------------------------------------

<% if user_signed_in? %>
  <li>
    <%= link_to('Logout', destroy_user_session_path, method: :delete) %>        
  </li>
<% else %>
  <li>
    <%= link_to('Login', new_user_session_path) %>  
  </li>
<% end %>


views/devise/menu/_registration_items.html.erb
----------------------------------------------

<% if user_signed_in? %>
  <li>
    <%= link_to('Edit registration', edit_user_registration_path) %>
  </li>
<% else %>
  <li>
    <%= link_to('Register', new_user_registration_path) %>
  </li>
<% end %>


layouts/application.html.erb
----------------------------

<ul class="hmenu">
  <%= render 'devise/menu/registration_items' %>
  <%= render 'devise/menu/login_items' %>
</ul>
<%= yield %>


Sign_in, sign_out links
-----------------------

---v1---

<% if current_user.nil? %>

  <%= link_to new_user_session_path, class: 'login-button' do %>
    Sign in
  <% end %>
  
<% else %>

  <%= link_to app_dashboard_index_path, class: 'login-button' do %>
    Go to App
  <% end %>
  
  <%= link_to destroy_user_session_path, method: :delete do %>
    Log out
  <% end %>
  
<% end %>


---v2---

<% if user_signed_in? %>

  <%= link_to('Edit registration', edit_user_registration_path) %>
  <%= link_to('Logout', destroy_user_session_path, :method => :delete) %>        
<% else %>

  <%= link_to('Register', new_user_registration_path)  %>
  <%= link_to('Login', new_user_session_path)  %>  
<% end %>


styles.scss
-----------

ul.hmenu {
  list-style: none;	
  margin: 0 0 2em;
  padding: 0;
}

ul.hmenu li {
  display: inline;  
}



---21---


Styles for forms (with bootstrap)
---------------------------------

.btn:focus, .btn:active {
  outline: none !important;
  box-shadow: none !important;
}

input[type=text] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=email] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=password] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

input[type=password-confirmation] {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  background: transparent !important;
}

select {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  cursor: pointer;
}

textarea {
  border-top: 0 !important;
  border-left: 0 !important;
  border-right: 0 !important;
  box-shadow: none !important;
  cursor: pointer;
}


---


Snippet for sign out (for routes.rb)
------------------------------------

devise_scope :user do
  get '/users/sign_out' => 'devise/sessions#destroy'
end


---


Devise How To's:
----------------

https://github.com/heartcombo/devise/wiki/How-Tos


---


How To: Allow users to sign in with something other than their email address
----------------------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-with-something-other-than-their-email-address


---


Add sign_in, sign_out, and sign_up links to your layout template
----------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Add-sign_in,-sign_out,-and-sign_up-links-to-your-layout-template


---


Allow users to sign in using their username or email address
------------------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address


---


Redirect to specific page by sign up with devise
------------------------------------------------

https://github.com/heartcombo/devise/wiki/How-To:-Redirect-to-a-specific-page-on-successful-sign-up-(registration)





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------
Display a custom sign_in form anywhere in your app
--------------------------------------------------


Example with form_for and posting to user_session_path
------------------------------------------------------

<%= form_for(:user, :url => session_path(:user)) do |f| %>
  <%= f.text_field :email %>
  <%= f.password_field :password %>
  <%= f.check_box :remember_me %>
  <%= f.label :remember_me %>
  <%= f.submit 'Sign in' %>
  <%= link_to "Forgot your password?", new_password_path(:user) %>
<% end %>


---


Warning for client_side_validations
-----------------------------------

form_for(resource, :as => resource_name ... )


---


application_helper.rb
---------------------

def resource_name
  :user
send
 
def resource
  @resource ||= User.new
end

def resource_class
  User
end
 
def devise_mapping
  @devise_mapping ||= Devise.mappings[:user]
end


---


https://github.com/heartcombo/devise/wiki/How-To%3A-Display-a-custom-sign_in-form-anywhere-in-your-app


---


Devise registrations_controller.rb
----------------------------------


https://github.com/heartcombo/devise/blob/master/app/controllers/devise/registrations_controller.rb#L99



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------
Standart navbar with twitter-bootstrap
--------------------------------------


_nav.html.erb
-------------

---1---

$ touch views/layouts/_nav.html.erb



---2---

---v1--- (bootstrap_4.6)

<div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 bg-white border-bottom shadow-sm">
  <h5 class="my-0 mr-md-auto font-weight-normal"><%= link_to 'Send on Click', root_path, class: 'text-dark text-decoration-none' %></h5>

  <nav class="my-2 my-md-0 mr-md-3">
    <%= link_to 'Home', root_path, class: "text-dark mr-3 text-decoration-none" %>
  </nav>

</div>


---v2--- (bootstrap_4.6)

<div class="d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm">
  <h5 class="my-0 mr-md-auto font-weight-normal"><%= link_to 'Actionbox', root_path, class: 'text-dark text-decoration-none' %></h5>

  <nav class="my-2 my-md-0 mr-md-3">
    <%= link_to 'Home', root_path, class: "text-dark mr-3 text-decoration-none" %>
  </nav>

  <% if user_signed_in? %>

    <span class="badge badge-success float-right mr-5">
      <%= current_user.username %>
    </span>

    <nav class="my-2 my-md-0 mr-md-3">
      <%= link_to 'Settings', edit_user_registration_path, class: "text-dark mr-3 text-decoration-none" %>
    </nav>

    <%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "btn btn-outline-danger" %>
  <% else %>

    <%= link_to 'Sign in', new_user_session_path, class: "btn btn-success mr-3" %>
    <%= link_to 'Sign up', new_user_registration_path, class: "btn btn-secondary" %>

  <% end %>
</div>


---v3--- (bootstrap_5)

<header class="p-3 mb-3 border-bottom">
  <div class="container">
    <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">

      <h5 class="d-flex align-items-center mb-2 mb-lg-0 me-5">
        <%= link_to 'Devise Bootstrap', root_path, class: 'bi me-2 text-dark text-decoration-none' %>
      </h5>

      <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
        <li><%= link_to 'Home', root_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Terms', terms_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Contacts', contacts_path, class: "nav-link px-2 link-dark" %></li>
      </ul>

      <% if user_signed_in? %>

        <ul class="nav col-12 col-lg-auto me-lg-right mb-2 justify-content-center mb-md-0 me-3">
          <li><span class="badge bg-success"><%= current_user.username %></span></li>
        </ul>

        <div class="dropdown text-end">

          <a href="#" class="d-block link-dark text-decoration-none dropdown-toggle" id="dropdownUser1" data-bs-toggle="dropdown" aria-expanded="false">
            <img src="https://github.com/mdo.png" alt="mdo" width="32" height="32" class="rounded-circle">
          </a>

          <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1" style="">
            <li><a class="dropdown-item" href="#">New project</a></li>
            <li><a class="dropdown-item" href="#">Profile</a></li>
            <li><%= link_to 'Settings', edit_user_registration_path, class: "dropdown-item" %></li>

            <li><hr class="dropdown-divider"></li>
            <li><%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "dropdown-item text-danger" %></li>
          </ul>

        <% else %>

          <ul class="nav">
            <li class="nav-item"><%= link_to 'Sign in', new_user_session_path, class: "nav-link link-dark px-2" %></li>
            <li class="nav-item"><%= link_to 'Sign up', new_user_registration_path, class: "nav-link link-dark px-2" %></li>
          </ul>

        <% end %>

      </div>
    </div>
  </div>
</header>


---v5---

<header class="p-3 border-bottom shadow-sm">
  <div class="container">
    <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start">

      <h5 class="d-flex align-items-center mb-2 mb-lg-0 me-5">
        <%= link_to 'Devise Bootstrap', root_path, class: 'bi me-2 text-dark text-decoration-none' %>
      </h5>

      <ul class="nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
        <li><%= link_to 'iPhones', phones_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'iPhone defects', defects_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'iPhone repair', repairs_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Home', root_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Terms', terms_path, class: "nav-link px-2 link-dark" %></li>
        <li><%= link_to 'Contacts', contacts_path, class: "nav-link px-2 link-dark" %></li>
      </ul>

      <% if user_signed_in? %>

        <ul class="nav col-12 col-lg-auto me-lg-right mb-2 justify-content-center mb-md-0 me-3">
          <li><span class="badge bg-success"><%= current_user.username %></span></li>
        </ul>

        <div class="dropdown text-end">

          <a
            href="#"
            class="d-block link-dark text-decoration-none dropdown-toggle"
            id="dropdownUser1"
            data-bs-toggle="dropdown"
            aria-expanded="false">

            <%= user_avatar(current_user, 40) %>
          </a>

          <ul class="dropdown-menu text-small" aria-labelledby="dropdownUser1" style="">
            <li><%= link_to 'Articles', articles_path, class: 'dropdown-item' %></li>
            <li><%= link_to 'New article', new_article_path, class: 'dropdown-item' %></li>
            <li><%= link_to 'Settings', edit_user_registration_path, class: "dropdown-item" %></li>

            <li><hr class="dropdown-divider"></li>
            <li><%= link_to 'Sign out', destroy_user_session_path, method: :delete, class: "dropdown-item text-danger" %></li>
          </ul>

        <% else %>

          <ul class="nav">
            <li class="nav-item"><%= link_to 'Sign in', new_user_session_path, class: "nav-link link-dark px-2" %></li>
            <li class="nav-item"><%= link_to 'Sign up', new_user_registration_path, class: "nav-link link-dark px-2" %></li>
          </ul>

        <% end %>

      </div>
    </div>
  </div>
</header>



---3---

<%= render 'layouts/nav' %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------
Mailcatcher
-----------

https://mailcatcher.me/

gem 'mailcatcher'


---


environments/development.rb
---------------------------

config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = { :address => '127.0.0.1', :port => 1025 }
config.action_mailer.raise_delivery_errors = false





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------
Action mailbox for Rails app
----------------------------

$ rails action_mailbox:install
$ rails g mailbox Replies

https://github.com/mikel/mail


---


Rails email conductor path
--------------------------

http://localhost:3000/rails/conductor/action_mailbox/inbound_emails/new


---


https://guides.rubyonrails.org/action_mailer_basics.html
http://rusrails.ru/action-mailer-basics





---------------------------------------------------------------------------------------------------------------------------------------------------------

------
Emails
------

---1---

config/environments/development.rb
----------------------------------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.perform_caching = false
config.action_mailer.perform_deliveries = true
config.action_mailer.raise_delivery_errors = true
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  user_name:      Rails.application.secrets.mail_username,
  password:       Rails.application.secrets.mail_password,
  domain:         'gmail.com',
  address:       'smtp.gmail.com',
  port:          '587',
  authentication: :plain,
  enable_starttls_auto: true
}



---2---


Next, we add mail_username and mail_password to config/secrets.yml
------------------------------------------------------------------

development:
  secret_key_base: 1d7...fc1
  mail_username: test@example.com
  mail_password: Password123
  

  
---3---

config/initializers/devise.rb
-----------------------------

config.mailer_sender = 'test@example.com'



---4---

Open in web browser: /users/password/new . And try to send reset password instructions.


Alternative is changing
-----------------------

config.action_mailer.smtp_settings.port to 465 

may help.


Welcome email
-------------

---1---

app/models/user.rb
------------------

after_create :send_admin_mail

def send_admin_mail
  UserMailer.send_welcome_email(self).deliver_later
end



---2---

Generate UserMailer
-------------------

$ rails generate mailer UserMailer



---3---

app/mailers/application_mailer.rb
---------------------------------

default from: 'test@example.com'

def send_welcome_email(user)

  @user = user
  mail(:to => @user.email, :subject => "Welcome!")
end



---4---

$ mkdir views/user_mailer && touch send_welcome_mail.html.erb



---5---

<!DOCTYPE html>
<html>
  <head>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
  </head>
  
  <body>
    <h1>Welcome, <%= @user.email %></h1>
    <p>
      Access to app under following URL: <%= @url %>.
    </p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>



---6---

$ touch send_welcome_mail.text.erb



---7---

Welcome, <%= @user.email %>
===============================================

Access to app under following URL: <%= @url %>.

Thanks for joining and have a great day!





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------
Action Mailer configure examples
--------------------------------

Google
------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  address:              'smtp.gmail.com',
  port:                 587,
  domain:               '7495500@gmail.com',
  user_name:            'Gor',
  password:             'ktotI1987',
  authentication:       'plain',
  enable_starttls_auto: true 
}


---


Yandex
------

config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :tls => true,
  address: 'smtp.yandex.ru',
  port: 465,
  domain: 'yandex.ru',
  authentication: 'plain',
  user_name: 'name@yandex.ru',
  password: 'пароль'
}





---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------
Wellcome with Action Mailer
---------------------------

---1---

$ rails g mailer welcome



---2---

environment/development.rb
--------------------------

config.action_mailer.raise_delivery_errors = true
config.action_mailer.perform_deliveries = true
config.action_mailer.default_url_options = { host: 'localhost:3000' }
config.action_mailer.delivery_method = :smtp

config.action_mailer.smtp_settings = {
  address:        smtp.gmail.com,
  port:           587,
  username:       '7495500@gmail.com',
  password:       '',
  authentication: 'plain'
}



---3---

$ rails g controller welcome



Configuration for gmail (mailer)
--------------------------------

https://guides.rubyonrails.org/action_mailer_basics.html#action-mailer-configuration-for-gmail


Generate mailer cmd example
---------------------------

$ rails g mailer CommentMailer new_comment


---


About mail send
---------------

https://github.com/mikel/mail





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------
Add postmark to Rails app
-------------------------


https://postmarkapp.com/


---


https://postmarkapp.com/developer/integration/official-libraries#rails-gem


---1---

Add the Postmark Rails Gem to your Gemfile
------------------------------------------

gem 'postmark-rails'



---2---

$ rails secret


$ EDITOR=vim rails credentials:edit

postmark_api_token: "12f38d1a-ec13-43f2-b5b1-962878ef257e"



---3---

Then set Postmark as your preferred mail delivery method via config/application.rb
----------------------------------------------------------------------------------

config.action_mailer.delivery_method = :postmark

config.action_mailer.postmark_settings = {
  api_token: Rails.application.credentials.postmark_api_token
}



---4---

Generate a mailer, views, and preview
-------------------------------------

$ rails generate mailer test hello



---5---

Set up your mailer
------------------

class TestMailer < ApplicationMailer

  default from: 'sender@example.org'

  def hello
    mail(
      subject: 'Hello from Postmark',
      to: 'sender@example.org',
      from: 'sender@example.org',
      html_body: '<strong>Hello</strong> dear Postmark user.',
      track_opens: 'true',
      message_stream: 'outbound')
  end
end



---6---

Send an email from the console by calling deliver_now
-----------------------------------------------------

$ rails console

$ TestMailer.hello.deliver_now



---7---

https://github.com/wildbit/postmark-rails



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------
Basic rails application gems:
-----------------------------

Gemfile:
--------

gem 'pg'
gem 'devise', github: 'heartcombo/devise', branch: 'ca-omniauth-2'
gem 'omniauth-facebook'
gem 'omniauth-github', github: 'omniauth/omniauth-github', branch: 'master'
gem 'omniauth-google-oauth2'
gem "omniauth-rails_csrf_protection"
gem 'mini_magick'
gem 'carrierwave'
gem 'cancancan'
gem 'rails_admin', git: 'https://github.com/sferik/rails_admin.git'
gem 'activerecord-session_store'
gem 'gmaps4rails'
gem 'geocoder'
gem 'sidekiq'
gem 'image_processing', '~> 1.2'
gem 'mailcatcher'
gem 'mail'
gem "actiontext"

group :test do
  gem 'capybara', '>= 3.26'
  gem 'selenium-webdriver'
  gem 'webdrivers'
  gem 'rspec-rails'
  gem 'factory_bot'
end

group :development, :test do
  gem 'shoulda-matchers'
  gem 'database_cleaner-active_record'
  gem "factory_bot_rails"
  gem "pry-rails"
  gem "email_spec"
  gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
end



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

----------
Actiontext
----------

Actiontext guides
-----------------

https://edgeguides.rubyonrails.org/action_text_overview.html
https://github.com/rails/actiontext/tree/archive
https://dennishellweg.com/custom-attachments-in-action-text

---1---

Add to Gemfile
--------------

gem 'actiontext'
gem 'image_processing'



---2---

$ rails g scaffold acticle name



---3---

$ brew install image_magick vips



---4---

$ rails action_text:install
$ rails db:migrate



---5---

article.rb
----------

has_rich_text :content



---6---

Add to strong params in articles_controller.rb
----------------------------------------------

def article_params
  params.require(:article).permit(:name, :content)
end



---7---

Add fields to form
------------------

articles/_form.html.erb
-----------------------

<%= form.label :content %>
<%= form.rich_text_area :content %>



---8---

application.js
--------------

import "trix"
import "@rails/actiontext"



---9---

actiontext.scss
---------------

@import "trix/dist/trix";



---10---

application.scss
----------------

@import "./actiontext.scss"


---


Action Text generation command
------------------------------

$ rails action_text:install && rails db:migrate


---


action text atext.scss
----------------------

$ cd '/home/gor/Рабочий стол/ruby files/styles'



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------
Add avatar with carrierwave gem
-------------------------------

---1---

---v1---

Gemfile:
--------

gem 'carrierwave', '~> 2.0'
gem 'mini_magick'



---v2---

application path
----------------

$ gem install carrierwave


$ bundle
$ bundle update



---3---

$ rails generate uploader Avatar


should give you a file in
-------------------------

!!! app/uploaders/avatar_uploader.rb



---4---

app/uploaders/avatar_uploader.rb
--------------------------------

class AvatarUploader < CarrierWave::Uploader::Base
  storage :file
end


class MyUploader < CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick

  process resize_to_fit: [800, 800]

  version :thumb do
    process resize_to_fill: [200,200]
  end

end


uploader = AvatarUploader.new
uploader.store!(my_file)                              # size: 1024x768

uploader.url # => '/url/to/my_file.png'               # size: 800x800
uploader.thumb.url # => '/url/to/thumb_my_file.png'   # size: 200x200


---


You can use your uploader class to store and retrieve files like this
---------------------------------------------------------------------

uploader = AvatarUploader.new

uploader.store!(my_file)

uploader.retrieve_from_store!('my_file.png')



---5---

Add a string column to the model
--------------------------------

$ rails g migration add_avatar_to_users avatar:string && rails db:migrate



---6---

Open your model file and mount the uploader
-------------------------------------------

class User < ApplicationRecord
  mount_uploader :avatar, AvatarUploader
end


mount_uploader :avatar, AvatarUploader



---7---

Cache files by assigning them to the attribute
----------------------------------------------

u = User.new
u.avatar = params[:file] # Assign a file like this, or

# like this
File.open('somewhere') do |f|
  u.avatar = f
end

u.save!
u.avatar.url # => '/url/to/file.png'
u.avatar.current_path # => 'path/to/file.png'
u.avatar_identifier # => 'file.png'



---8---

Methods
-------

u = User.new
u.avatar.file.nil?



---9---

Add _form to template.html.erb
------------------------------

<%= form.file_field :avatar %>


Upload controller permits
-------------------------

params.require(:user).permit(:email, :first_name, :last_name, :avatar, :avatar_cache)


application_controller.rb
-------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters

  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me, :avatar]
  
  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end



---10---

Add avatar_cache it to the attr_accessible
------------------------------------------

_form.html.erb:
---------------

<%= form_for @user, html: { multipart: true } do |f| %>
  
  <%= f.label :avatar %>
  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %> 
<% end %>


<%= f.hidden_field :avatar_cache %>


Add input field to _form.html.erb
---------------------------------

---v1---

<div class="form-group">

  <%= form.label 'Product Image' %>
  
  <div class="custom-file">
    <%= form.label 'Choose file', class: 'custom-file-label' %>
    <%= form.file_field :image, type: 'file', class: 'custom-file-input' %>
    <%= form.hidden_field :image_cache %>
  </div>
</div>



---11---

Removing uploaded files
-----------------------

_form.html.erb:
---------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
  <%= f.file_field :avatar %>

  <%= f.check_box :remove_avatar %>
  <%= f.label 'Remove avatar' %>

<% end %>


---v2---

<div class="form-group">
  <%= f.label 'Profile avatar' %>
  <div class="custom-file">
    <%= f.label :avatar, class: 'custom-file-label' %>
    <%= f.file_field :avatar, type: 'file', class: 'custom-file-input' %>
    <%= f.hidden_field :avatar_cache %>
  </div>
</div>


Remove the file manually
------------------------

@user.remove_avatar!
@user.save



---12---

Uploading files from a remote location (from internet)
------------------------------------------------------

_form.html.erb:
---------------

<%= form_for @user, html: { multipart: true } do |f| %>

    <%= f.label :avatar %>
    <%= image_tag(@user.avatar_url) if @user.avatar? %>
    
    <%= f.text_field :remote_avatar_url %>

<% end %>



---13---

Providing a default URL
-----------------------

Uploader.rb:
------------

---v1---

class MyUploader < CarrierWave::Uploader::Base

  def default_url(*args)
    "/images/fallback/" + [version_name, "default.png"].compact.join('_')
  end
  
end


---v2---

If using the Rails asset pipeline
---------------------------------

class MyUploader < CarrierWave::Uploader::Base

  def default_url(*args)
    ActionController::Base.helpers.asset_path("fallback/" + [version_name, "default.png"].compact.join('_'))
  end
  
end



---14---

Recreating versions
-------------------

model.rb
--------

---v1---

instance = MyUploader.new
instance.recreate_versions!(:thumb, :large)


---v2---

On a mounted uploader
---------------------

User.find_each do |user|
  user.avatar.recreate_versions! if user.avatar?
end



---15---

Configuring CarrierWave
-----------------------

---v1---

Create in initializer for this
------------------------------

$ config/initializers/carrierwave.rb


CarrierWave.configure do |config|

  config.permissions = 0666
  config.directory_permissions = 0777
  config.storage = :file
  
end


---v2---

class AvatarUploader < CarrierWave::Uploader::Base

  permissions 0777
  
end


If you want CarrierWave to fail noisily in development, you can change these configs in your environment file
-------------------------------------------------------------------------------------------------------------

CarrierWave.configure do |config|

  config.ignore_integrity_errors = false
  config.ignore_processing_errors = false
  config.ignore_download_errors = false
  
end



---16---

Carrierwave helper snippents
----------------------------

application_helper.rb
---------------------

---v1---

def profile_picture account, width
  image_path = account.avatar.present? ? account.avatar.url : 'profile.jpg'
  image_tag(image_path, width: width, height: width, class: 'rounded')
end


<%= profile_picture current_account, 40 %>

<%= link_to profile_picture(current_account, 40), edit_account_registration_path(current_account) %>


---v2---

def product_image product, width, height
  image_path = product.image.present? ? product.image.url : 'product.png'
  image_tag(image_path, width: width, height: height, class: 'rounded')
end


display snippet in template.html.erb
------------------------------------


<%= product_image(@product, 300, 200) %>


<% @products.each do |product| %>
  <%= product_image(product, 60, 45) %>
<% end %>


<%= image_tag(@category.products.first.image.url, class: 'rounded')


---v3---

def profile_picture account, width = 100
  image_path = account.image.present? ? account.image.url : 'default_profile.jpg'
  image_tag(image_path, width: width, class: 'img-circle m-r-10')
end


<%= profile_picture(account, 40) %>

<%= link_to profile_picture(account, 40), profile_path(account.username) %>

<%= image_tag post.image.url, class: 'img img-fluid' %>

<%= profile_picture @account, 200 %>


---v4---

def product_image product
  image_path = product.image.present? ? product.image.url : 'product.jpg'
  image_tag(image_path, class: 'img-fluid')
end

<% if cat.products.first.present? %>
  <%= product_image @category.products.first %>
<% end %>


<%= @product.image.identifier %>





---------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------
Multiple file uploads with carrierwave
--------------------------------------

---1---

---v1---

Gemfile:
--------

gem 'carrierwave', '~> 2.0'
gem 'mini_magick'



---v2---

application path
----------------

$ gem install carrierwave


$ bundle
$ bundle update



---3---

$ rails generate uploader Image


should give you a file in
-------------------------

!!! app/uploaders/image_uploader.rb



---4---

app/uploaders/avatar_uploader.rb
--------------------------------

class AvatarUploader < CarrierWave::Uploader::Base
  storage :file
end


class MyUploader < CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick

  process resize_to_fit: [800, 800]

  version :thumb do
    process resize_to_fill: [200,200]
  end
end


uploader = AvatarUploader.new
uploader.store!(my_file)                              # size: 1024x768

uploader.url # => '/url/to/my_file.png'               # size: 800x800
uploader.thumb.url # => '/url/to/thumb_my_file.png'   # size: 200x200



---5---

Open your model file and mount the uploader
-------------------------------------------

class User < ApplicationRecord
  mount_uploaders :avatars, AvatarUploader
end

mount_uploaders :avatars, AvatarUploader



---6---

Add _form to template.html.erb
------------------------------

<%= form.file_field :avatars, multiple: true %>


Upload controller permits
-------------------------

params.require(:user).permit(:email, :first_name, :last_name, { avatars: [] })


application_controller.rb
-------------------------

before_action :configure_permitted_parameters, if: :devise_controller?

protected

def configure_permitted_parameters

  added_attrs = [:username, :email, :password, :password_confirmation, :remember_me, { avatars: [] }]
  
  devise_parameter_sanitizer.permit :sign_up, keys: added_attrs
  devise_parameter_sanitizer.permit :sign_in, keys: [:login, :password]
  devise_parameter_sanitizer.permit :account_update, keys: added_attrs
end


Select multiple files in the upload dialog
------------------------------------------

u = User.new(params[:user])
u.save!
u.avatars[0].url # => '/url/to/file.png'
u.avatars[0].current_path # => 'path/to/file.png'
u.avatars[0].identifier # => 'file.png'



---7---

Preserve existing files on uploading new one
--------------------------------------------

<% user.avatars.each do |avatar| %>
  <%= hidden_field :user, :avatars, multiple: true, value: avatar.identifier %>
<% end %>

<%= form.file_field :avatars, multiple: true %>


Changing the storage directory
------------------------------

if storage == AWS
-----------------

class MyUploader < CarrierWave::Uploader::Base
  def store_dir
    'public/my/upload/directory'
  end
end


if storage == file
------------------

class MyUploader < CarrierWave::Uploader::Base
  def cache_dir
    '/tmp/projectname-cache'
  end
end



---8---

Securing uploads
----------------

Uploader.rb
-----------

file with the wrong extension
-----------------------------

class MyUploader < CarrierWave::Uploader::Base
  def extension_allowlist
    %w(jpg jpeg gif png)
  end
end


uploader that accepts only images
---------------------------------

class MyUploader < CarrierWave::Uploader::Base
  def content_type_allowlist
    /image\//
  end
end


reject content types
--------------------

class NoJsonUploader < CarrierWave::Uploader::Base
  def content_type_denylist
    ['application/text', 'application/json']
  end
end


Filenames and unicode chars
---------------------------

CarrierWave::SanitizedFile.sanitize_regexp = /[^[:word:]\.\-\+]/



---9---

Processing Methods: mini_magick
-------------------------------

convert
resize_to_limit
resize_to_fit
resize_to_fill
resize_and_pad

!!! See carrierwave/processing/mini_magick.rb for details.


Conditional process
-------------------

uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base

  process :scale => [200, 200], :if => :image?
  
  def image?(carrier_wave_sanitized_file)
    true
  end
end


Nested versions
---------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base

  version :animal do
    version :human
    version :monkey
    version :llama
  end
  
end


Conditional versions
--------------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base

  version :human, if: :is_human?
  version :monkey, if: :is_monkey?
  version :banner, if: :is_landscape?

private

  def is_human? picture
    model.can_program?(:ruby)
  end

  def is_monkey? picture
    model.favorite_food == 'banana'
  end

  def is_landscape? picture
    image = MiniMagick::Image.new(picture.path)
    image[:width] > image[:height]
  end
end


Create versions from existing versions
--------------------------------------

Uploader.rb
-----------

class MyUploader < CarrierWave::Uploader::Base

  version :thumb do
    process resize_to_fill: [280, 280]
  end

  version :small_thumb, from_version: :thumb do
    process resize_to_fill: [20, 20]
  end
end



---10---

Add avatar_cache in to the attr_accessible
------------------------------------------

_form.html.erb
--------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>
  
  <%= f.label :avatar %>
  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %>
  
<% end %>


<%= f.hidden_field :avatar_cache %>


Add input field to _form.html.erb
---------------------------------

---v1---

<div class="mb-3">
  <div class="mb-3">
    <%= f.label :avatars, class: 'form-label mb-3' %><br>
    <%= f.file_field :avatars, type: 'file', multiple: true, class: 'form-control' %>
    <%= f.hidden_field :avatars_cache %>
  </div>

  <div class="mt-3 mb-3">
    <%= image_tag(resource.avatars.url, width: '200') if resource.avatars? %>
  </div>
</div>


---v2---

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
    
  <%= f.file_field :avatar %>
  <%= f.hidden_field :avatar_cache %>
<% end %>



---11---

Removing uploaded files
-----------------------

_form.html.erb
--------------

---v1---

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
  <%= f.file_field :avatar %>

  <%= f.check_box :remove_avatar %>
  <%= f.label 'Remove avatar' %>

<% end %>


---v2---

<div class="form-group">
  <%= f.label 'Profile avatar' %>
  <div class="custom-file">
    <%= f.label :avatar, class: 'custom-file-label' %>
    <%= f.file_field :avatar, type: 'file', class: 'custom-file-input' %>
    <%= f.hidden_field :avatar_cache %>
  </div>
</div>


Remove the file manually
------------------------

@user.remove_avatar!
@user.save



---12---

Uploading files from a remote location (from internet)
------------------------------------------------------

_form.html.erb:
---------------

<%= form_for @user, html: { multipart: true } do |f| %>

  <%= f.label :avatar %>
  <%= image_tag(@user.avatar_url) if @user.avatar? %>
    
  <%= f.text_field :remote_avatar_url %>
<% end %>



---13---

Providing a default URL
-----------------------

Uploader.rb
-----------

---v1---

class MyUploader < CarrierWave::Uploader::Base

  def default_url(*args)
    "/images/fallback/" + [version_name, "default.png"].compact.join('_')
  end
end


---v2---

If using the Rails asset pipeline
---------------------------------

class MyUploader < CarrierWave::Uploader::Base

  def default_url(*args)
    ActionController::Base.helpers.asset_path("fallback/" + [version_name, "default.png"].compact.join('_'))
  end
end



---14---

Recreating versions
-------------------

model.rb
--------

---v1---

instance = MyUploader.new
instance.recreate_versions!(:thumb, :large)


---v2---

On a mounted uploader
---------------------

User.find_each do |user|
  user.avatar.recreate_versions! if user.avatar?
end



---15---

Configuring CarrierWave
-----------------------

---v1---

Create in initializer for this
------------------------------

$ config/initializers/carrierwave.rb


CarrierWave.configure do |config|

  config.permissions = 0666
  config.directory_permissions = 0777
  config.storage = :file
end


---v2---

class AvatarUploader < CarrierWave::Uploader::Base

  permissions 0777
end


If you want CarrierWave to fail noisily in development, you can change these configs in your environment file
-------------------------------------------------------------------------------------------------------------

CarrierWave.configure do |config|

  config.ignore_integrity_errors = false
  config.ignore_processing_errors = false
  config.ignore_download_errors = false
end



---16---

Carrierwave helper snippents
----------------------------

application_helper.rb
---------------------

---v1---

def profile_picture account, width
  image_path = account.avatar.present? ? account.avatar.url : 'profile.jpg'
  image_tag(image_path, width: width, height: width, class: 'rounded')
end


<%= profile_picture current_account, 40 %>

<%= link_to profile_picture(current_account, 40), edit_account_registration_path(current_account) %>


---v2---

def product_image product, width, height
  image_path = product.image.present? ? product.image.url : 'product.png'
  image_tag(image_path, width: width, height: height, class: 'rounded')
end


display snippet in template.html.erb
------------------------------------


<%= product_image(@product, 300, 200) %>


<% @products.each do |product| %>
  <%= product_image(product, 60, 45) %>
<% end %>


<%= image_tag(@category.products.first.image.url, class: 'rounded')


---v3---

def profile_picture account, width = 100
  image_path = account.image.present? ? account.image.url : 'default_profile.jpg'
  image_tag(image_path, width: width, class: 'img-circle m-r-10')
end


<%= profile_picture(account, 40) %>

<%= link_to profile_picture(account, 40), profile_path(account.username) %>

<%= image_tag post.image.url, class: 'img img-fluid' %>

<%= profile_picture @account, 200 %>


---v4---

def product_image product
  image_path = product.image.present? ? product.image.url : 'product.jpg'
  image_tag(image_path, class: 'img-fluid')
end

<% if cat.products.first.present? %>
  <%= product_image @category.products.first %>
<% end %>


<%= @product.image.identifier %>



https://gist.github.com/nguyenngoc2505/93494b8fea2224f2fab6




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------
HTML5 Datalist using Ruby on Rails form_for
-------------------------------------------

---v1---

<%= form_for @person do |f| %>

  <%= f.label :first_name, "First Name" %>:
  <%= f.text_field :first_name, list: 'first-name' %>
  
  <datalist id="first-name">
    <% Person.all.each do |person| %>
      <option value="<%= person.first_name %>"></option>
    <% end %>
  </datalist>
  
  <%= f.submit %>
<% end %>


You may also want to do distinct:

<% Person.select(:first_name).distinct.each do |person| %>


---


modules
-------

<div class="row p-5 shadow bg-white mb-5">

  <%= form.label :manufacturers, for: 'manufacturerDataList', class: 'mb-3' %>
  <%= form.select :manufacturers, mod.manufacturers.collect { |u| [u] }, {}, { class: 'form-control' } %>

  <datalist id="datalistOptions">
    <%= mod.manufacturers.each do |module_manufacturer| %>
      <option value="<% module_manufacturer %>">
    <% end %>
  </datalist>
</div>


---v2---

<%= options_for_select(Person.pluck(:first_name).uniq, @person.first_name) %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------
Rails Shopping Cart
-------------------

---1---

Rails generate Model commands
-----------------------------

rails g model Product name:string price:decimal
rails g model Cart  
rails g model LineItem quantity:integer product_id:integer cart_id:integer order_id:integer
rails g model Order name:string email:string address:text



---2---

Database schema reference
-------------------------

create_table "products", force: :cascade do |t|
  t.string   "name"
  t.decimal  "price",      default: 0.0
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end

create_table "carts", force: :cascade do |t|
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end

create_table "line_items", force: :cascade do |t|
  t.integer  "quantity",   default: 1
  t.integer  "product_id"
  t.integer  "cart_id"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
  t.integer  "order_id"
end

create_table "orders", force: :cascade do |t|
  t.string   "name"
  t.string   "email"
  t.text     "address"
  t.string   "pay_method"
  t.datetime "created_at", null: false
  t.datetime "updated_at", null: false
end



---3---

Seed database with initial models
---------------------------------

# PRODUCT
Product.destroy_all
product1 = Product.create({:name=>"tomato", :price => 1})
product2 = Product.create({:name=>"milk", :price => 3})
product3 = Product.create({:name=>"bread", :price => 5.50})
product4 = Product.create({:name=>"bacon", :price => 10})
product5 = Product.create({:name=>"cheese", :price => 3.20})

puts "Total number of products: #{Product.all.count}"
puts "Product names: #{Product.all.pluck("name")}"
puts "Product1: #{product1.name} price: #{product1.price.round(2)}"
puts "Product2: #{product2.name} price: #{product2.price.round(2)}"
puts "Product3: #{product3.name} price: #{product3.price.round(2)}"
puts "Product4: #{product4.name} price: #{product4.price.round(2)}"
puts "Product5: #{product5.name} price: #{product5.price.round(2)}"

# CART
Cart.destroy_all
puts "\nTotal cart count: #{Cart.all.count}"



---4---

Rails generate Controller commands
----------------------------------

rails g controller Products index new edit
rails g controller LineItems
rails g controller Carts show
rails g controller Orders index show new



---5---

Routes setup
------------

root 'products#index'

get 'carts/:id' => "carts#show", as: "cart"
delete 'carts/:id' => "carts#destroy"

post 'line_items/:id/add' => "line_items#add_quantity", as: "line_item_add"
post 'line_items/:id/reduce' => "line_items#reduce_quantity", as: "line_item_reduce"
post 'line_items' => "line_items#create"
get 'line_items/:id' => "line_items#show", as: "line_item"
delete 'line_items/:id' => "line_items#destroy"

resources :products
resources :orders


links
-----

Link from the Product index page (erb tags)
-------------------------------------------

button_to "Add to cart", line_items_path(:product_id => product.id)


Link from the Cart show (erb tags)
----------------------------------

link_to "Add (+1)", line_item_add_path(:id => line_item), method: :post
link_to "Reduce (-1)", line_item_reduce_path(:id => line_item), method: :post
link_to "Remove item", line_item_path(line_item), method: :delete



---6---

Products Controller
-------------------

class ProductsController < ApplicationController

  def index
    @products = Product.all
  end

  def new
    @product = Product.new
  end

  def create
    @product = Product.create(product_params)
    redirect_to products_path
  end

  def edit
    @product = Product.find(params[:id])
  end

  def update
    @product = Product.find(params[:id])
    @product.update(product_params)
    redirect_to products_path
  end

  def destroy
    @product = Product.find(params[:id])
    @product.destroy
    redirect_to products_path
  end

  private
  
    def product_params
      params.require(:product).permit(:name, :price)
    end
end



---7---

Product Views
-------------

Product Index show page
-----------------------

<h2>All Products</h2>

<% @products.each do |product| %>

  <p>Name: <%= product.name %>; unit price of <%= number_to_currency(product.price) %></p>
  
  <p>
    <%= link_to "Edit", edit_product_path(product) %> |
    <%= link_to "Delete", product_path(product), method: :delete, data: {confirm: "Are you sure?"} %>
    <%= button_to "Add #{product.name} to cart", line_items_path(:product_id => product.id) %>
  </p>
<% end%>

<%= link_to "New product", new_product_path


Product New and Edit form partial
---------------------------------

<%= form_for(@product) do |f| %>
  <p>
    <%= f.label :name %><br>
    <%= f.text_field :name, required: true, autofocus: true, placeholder: "Enter product name" %>
  </p>
  <p>
    <%= f.label :price %><br>
    <%= f.number_field :price, required: true %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>



---8---

Cart
----

Carts Controller
----------------

class ApplicationController < ActionController::Base

  protect_from_forgery with: :exception

  before_action :current_cart

  private
    def current_cart
      if session[:cart_id]
        cart = Cart.find_by(:id => session[:cart_id])
        if cart.present?
          @current_cart = cart
        else
          session[:cart_id] = nil
        end
      end

      if session[:cart_id] == nil
        @current_cart = Cart.create
        session[:cart_id] = @current_cart.id
      end
    end
end


class CartsController < ApplicationController
  def show
    @cart = @current_cart
  end

  def destroy
    @cart = @current_cart
    @cart.destroy
    session[:cart_id] = nil
    redirect_to root_path
  end
end



---9---

Cart View
---------

<h2>Cart show</h2>

<ul>
  <% @cart.line_items.each do |line_item| %>
  
    <li>Item: <%= line_item.product.name %>/ Price: <%= number_to_currency(line_item.product.price) %>/ Quantity: <%= line_item.quantity %>/ Total Price: <%= number_to_currency(line_item.total_price) %>
    # See lineItem section below for explanation of line_item links
    <ul>
      <li>
        <%= link_to "Add one", line_item_add_path(:id => line_item), method: :post %>
        <%= link_to "Reduce one", line_item_reduce_path(:id => line_item), method: :post %>
      </li>
      <li>
        <%= link_to "Remove item", line_item_path(line_item), method: :delete %>
      </li>
    </ul>
    #
  <% end %>
</ul>

<h3>Sub total: <%= number_to_currency(@cart.sub_total) %></h3>

# See Order section below for explanation of new_order_path
<%= link_to "Proceed to checkout", new_order_path %><br>

<%= link_to "Empty cart", cart_path(@current_cart),method: :delete, data: {confirm: "Are you sure?"}



---10---

Model Helpers
-------------

class LineItem < ActiveRecord::Base

  belongs_to :product
  belongs_to :cart
  belongs_to :order

  # LOGIC
  def total_price
    self.quantity * self.product.price
  end
end

class Cart < ActiveRecord::Base

  has_many :line_items, dependent: :destroy
  has_many :products, through: :line_items

  # LOGIC
  def sub_total
  
    sum = 0
    
    self.line_items.each do |line_item|
      sum+= line_item.total_price
    end
    return sum
  end
end



---11---

LineItem
--------


def create

  chosen_product = Product.find(params[:product_id])
  current_cart = @current_cart

  if current_cart.products.include?(chosen_product)

    @line_item = current_cart.line_items.find_by(:product_id => chosen_product)
    @line_item.quantity += 1
  else
    @line_item = LineItem.new
    @line_item.cart = current_cart
    @line_item.product = chosen_product
  end

  @line_item.save
  
  redirect_to cart_path(current_cart)
end

private

def line_item_params
  params.require(:line_item).permit(:quantity,:product_id, :cart_id)
end


View link
---------

button_to "Add #{product.name} to cart", line_items_path(:product_id => product.id)


Routes url
----------

post 'line_items' => "line_items#create"


Destroy LineItem
----------------

Controller logic
----------------

def destroy
  @line_item = LineItem.find(params[:id])
  @line_item.destroy
  redirect_to cart_path(@current_cart)
end


View link
---------

link_to "Remove item", line_item_path(line_item), method: :delete


Routes url
----------

get 'line_items/:id' => "line_items#show", as: "line_item"
delete 'line_items/:id' => "line_items#destroy"


add_quantity and remove_quantity
--------------------------------

Controller logic
----------------

def add_quantity
  @line_item = LineItem.find(params[:id])
  @line_item.quantity += 1
  @line_item.save
  
  redirect_to cart_path(@current_cart)
end

def reduce_quantity

  @line_item = LineItem.find(params[:id])
  
  if @line_item.quantity > 1
    @line_item.quantity -= 1
  end
  
  @line_item.save
  
  redirect_to cart_path(@current_cart)
end


View link
---------

link_to "Add one", line_item_add_path(:id => line_item), method: :post
link_to "Reduce one", line_item_reduce_path(:id => line_item), method: :post


Routes url
----------

post 'line_items/:id/add' => "line_items#add_quantity", as: "line_item_add"
post 'line_items/:id/reduce' => "line_items#reduce_quantity", as: "line_item_reduce"



---12---

Order
-----

Orders Controller
-----------------

class OrdersController < ApplicationController
  def index
    @orders = Order.all
  end

  def show
    @order = Order.find(params[:id])
  end

  def new
    @order = Order.new
  end
end


def create
  @order = Order.new(order_params)
  
  @current_cart.line_items.each do |item|
    @order.line_items << item
    item.cart_id = nil
  end
  
  @order.save
  Cart.destroy(session[:cart_id])
  session[:cart_id] = nil
  
  redirect_to root_path
end

private

def order_params
  params.require(:order).permit(:name, :email, :address, :pay_method)
end



---13---

Orders View
-----------

New Order page which asks user for payment details:
---------------------------------------------------

<%= form_for(@order) do |f| %>
  <p>
    <%= f.label :name %><br>
    <%= f.text_field :name, required: true, autofocus: true %>
  </p>
  <p>
    <%= f.label :email %><br>
    <%= f.email_field :email %>
  </p>
  <p>
    <%= f.label :address %><br>
    <%= f.text_area :address %>
  </p>
  <p>
    <%= f.submit %>
  </p>
<% end %>


Index page listing out all orders
---------------------------------

<h2>All Orders</h2>

<% @orders.each do |order| %>

  <p>Name: <%= order.name %></p>
  <p>Email: <%= order.email %></p>
  <p>Line Items: </p>
  
  <ul>
    <% order.line_items.each do |item| %>
      <li><%= item.quantity %> x <%= item.product.name %></li>
    <% end %>
  </ul>
<% end %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------
Layouts and Rendering in Rails
------------------------------


Rendering an Action's Template from Another Controller
------------------------------------------------------

render "products/show"
render template: "products/show"



Syntax for render
-----------------

render :edit
render action: :edit
render "edit"
render action: "edit"
render "books/edit"
render template: "books/edit"



Using render with :inline
-------------------------

render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>"
render inline: "xml.p {'Horrid coding practice!'}", type: :builder



Rendering Text
--------------

render plain: "OK"



Rendering HTML
--------------

render html: helpers.tag.strong('Not Found')



Rendering JSON
--------------

render json: @product



Rendering XML
-------------

render xml: @product



Rendering Vanilla JavaScript
----------------------------

render js: "alert('Hello Rails');"



Rendering raw body
------------------

render body: "raw"



Rendering raw file
------------------

render file: "#{Rails.root}/public/404.html", layout: false



Rendering objects
-----------------

render MyRenderable.new



Options for render
------------------

:content_type
:layout
:location
:status
:formats
:variants



The :content_type Option
------------------------

render template: "feed", content_type: "application/rss"



The :layout Option
------------------

render layout: "special_layout"
render layout: false



The :location Option
--------------------

render xml: photo, location: photo_url(photo)



The :status Option
------------------

render status: 500
render status: :forbidden



Rails understands this statuses
-------------------------------

----------------------------------------------------------------------------
Response Class	HTTP Status Code	Symbol
----------------------------------------------------------------------------
Informational	100			:continue
		101			:switching_protocols
		102			:processing
----------------------------------------------------------------------------
Success		200			:ok
		201			:created
		202			:accepted
		203			:non_authoritative_information
		204			:no_content
		205			:reset_content
		206			:partial_content
		207			:multi_status
		208			:already_reported
		226			:im_used
----------------------------------------------------------------------------
Redirection	300			:multiple_choices
		301			:moved_permanently
		302			:found
		303			:see_other
		304			:not_modified
		305			:use_proxy
		307			:temporary_redirect
		308			:permanent_redirect
----------------------------------------------------------------------------
Client Error	400			:bad_request
		401			:unauthorized
		402			:payment_required
		403			:forbidden
		404			:not_found
		405			:method_not_allowed
		406			:not_acceptable
		407			:proxy_authentication_required
		408			:request_timeout
		409			:conflict
		410			:gone
		411			:length_required
		412			:precondition_failed
		413			:payload_too_large
		414			:uri_too_long
		415			:unsupported_media_type
		416			:range_not_satisfiable
		417			:expectation_failed
		421			:misdirected_request
		422			:unprocessable_entity
		423			:locked
		424			:failed_dependency
		426			:upgrade_required
		428			:precondition_required
		429			:too_many_requests
		431			:request_header_fields_too_large
		451			:unavailable_for_legal_reasons
----------------------------------------------------------------------------
Server Error	500			:internal_server_error
		501			:not_implemented
		502			:bad_gateway
		503			:service_unavailable
		504			:gateway_timeout
		505			:http_version_not_supported
		506			:variant_also_negotiates
		507			:insufficient_storage
		508			:loop_detected
		510			:not_extended
		511			:network_authentication_required
----------------------------------------------------------------------------



The :formats Option
-------------------

render formats: :xml
render formats: [:json, :xml]



The :variants Option
--------------------

render variants: [:mobile, :desktop]



def index
  request.variant = determine_variant
end

private

def determine_variant

  variant = nil
  variant = :mobile if session[:use_mobile]

  variant
end



Choosing Layouts at Runtime
---------------------------

class ProductsController < ApplicationController

  layout :products_layout

  def show
    @product = Product.find(params[:id])
  end

  private
  
  def products_layout
    @current_user.special? ? "special" : "products"
  end
end



class ProductsController < ApplicationController

  layout Proc.new { |controller| controller.request.xhr? ? "popup" : "application" }
end



Conditional Layouts
-------------------

class ProductsController < ApplicationController

  layout "product", except: [:index, :rss]
end



-----------------
Using redirect_to
-----------------


redirect_to photos_url
redirect_back(fallback_location: root_path)



Getting a Different Redirect Status Code
----------------------------------------

def index
  @books = Book.all
end

def show

  @book = Book.find_by(id: params[:id])
  
  if @book.nil?
    redirect_to action: :index
  end
end



-----------------------------------------
Using head To Build Header-Only Responses
-----------------------------------------

head :bad_request
head :created, location: photo_path(@photo)



-------------------
Structuring Layouts
-------------------

Asset tags
yield and content_for
Partials



Asset Tag Helpers
-----------------

auto_discovery_link_tag
javascript_include_tag
stylesheet_link_tag
image_tag
video_tag
audio_tag



Linking to Feeds with the auto_discovery_link_tag
-------------------------------------------------

<%= auto_discovery_link_tag(:rss, {action: "feed"}, {title: "RSS Feed"}) %>



Linking to JavaScript Files with the javascript_include_tag
-----------------------------------------------------------

<%= javascript_include_tag "main" %>
<%= javascript_include_tag "main", "columns" %>
<%= javascript_include_tag "main", "/photos/columns" %>
<%= javascript_include_tag "http://example.com/main.js" %>



Linking to CSS Files with the stylesheet_link_tag
-------------------------------------------------

<%= stylesheet_link_tag "main" %>
<%= stylesheet_link_tag "main", "columns" %>
<%= stylesheet_link_tag "main", "photos/columns" %>
<%= stylesheet_link_tag "http://example.com/main.css" %>
<%= stylesheet_link_tag "main_print", media: "print" %>



Linking to Images with the image_tag
------------------------------------

<%= image_tag "header.png" %>
<%= image_tag "icons/delete.gif" %>
<%= image_tag "icons/delete.gif", {height: 45} %>
<%= image_tag "home.gif" %>
<%= image_tag "home.gif", alt: "Home" %>
<%= image_tag "home.gif", size: "50x20" %>
<%= image_tag "home.gif", alt: "Go Home", id: "HomeImage", class: "nav_bar" %>




Linking to Videos with the video_tag
------------------------------------

<%= video_tag "movie.ogg" %>
<%= video_tag ["trailer.ogg", "movie.ogg"] %>



Linking to Audio Files with the audio_tag
-----------------------------------------

<%= audio_tag "music.mp3" %>
<%= audio_tag "music/first_song.mp3" %>



Using the content_for Method
----------------------------

<% content_for :head do %>
  <title>A simple page</title>
<% end %>

<p>Hello, Rails!</p>


it is
-----

<html>
  <head>
  <title>A simple page</title>
  </head>
  <body>
  <p>Hello, Rails!</p>
  </body>
</html>



--------------
Using Partials
--------------

<%= render "menu" %>
<%= render "shared/menu" %>
( partial from app/views/shared/_menu.html.erb )



Using Partials to Simplify Views
--------------------------------

<%= render "shared/ad_banner" %>

<h1>Products</h1>

<p>Here are a few of our fine products:</p>


<%= render "shared/footer" %>



users/index.html.erb
--------------------

<%= render "shared/search_filters", search: @q do |form| %>
  <p>
    Name contains: <%= form.text_field :name_contains %>
  </p>
<% end %>



roles/index.html.erb
--------------------

<%= render "shared/search_filters", search: @q do |form| %>
  <p>
    Title contains: <%= form.text_field :title_contains %>
  </p>
<% end %>



shared/_search_filters.html.erb
-------------------------------

<%= form_with model: search do |form| %>

  <h1>Search form:</h1>
  
  <fieldset>
    <%= yield form %>
  </fieldset>
  
  <p>
    <%= form.submit "Search" %>
  </p>
<% end %>



Partial Layouts
---------------

<%= render partial: "link_area", layout: "graybar" %>



Passing Local Variables
-----------------------

new.html.erb:

<h1>New zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>



edit.html.erb
-------------

<h1>Editing zone</h1>
<%= render partial: "form", locals: {zone: @zone} %>



_form.html.erb
--------------

<%= form_with model: zone do |form| %>
  <p>
    <b>Zone name</b><br>
    <%= form.text_field :name %>
  </p>
  <p>
    <%= form.submit %>
  </p>
<% end %>



Pass a local variable to a partial in only specific cases use the local_assigns
-------------------------------------------------------------------------------


index.html.erb
--------------

<%= render user.articles %>



show.html.erb
-------------

<%= render article, full: true %>



_article.html.erb
-----------------

<h2><%= article.title %></h2>

<% if local_assigns[:full] %>
  <%= simple_format article.body %>
<% else %>
  <%= truncate article.body %>
<% end %>



<%= render partial: "customer", object: @new_customer %>

shorthand syntax
----------------

<%= render @customer %>



Rendering Collections
---------------------

index.html.erb
--------------

<h1>Products</h1>
<%= render partial: "product", collection: @products %>



_product.html.erb
-----------------

<p>Product Name: <%= product.name %></p>



<h1>Products</h1>
<%= render @products %>



index.html.erb
--------------

<h1>Contacts</h1>
<%= render [customer1, employee1, customer2, employee2] %>



customers/_customer.html.erb
----------------------------

<p>Customer: <%= customer.name %></p>



employees/_employee.html.erb
----------------------------

<p>Employee: <%= employee.name %></p>



<h1>Products</h1>
<%= render(@products) || "There are no products available." %>



Local Variables
---------------

<%= render partial: "product", collection: @products, as: :item %>
<%= render partial: "product", collection: @products, as: :item, locals: {title: "Products Page"} %>



Spacer Templates
----------------

<%= render partial: @products, spacer_template: "product_ruler" %>



Collection Partial Layouts
--------------------------

<%= render partial: "product", collection: @products, layout: "special_layout" %>



Using Nested Layouts
--------------------

<html>
  <head>
    <title><%= @page_title or "Page Title" %></title>
    <%= stylesheet_link_tag "layout" %>
    <style><%= yield :stylesheets %></style>
  </head>
  <body>
    <div id="top_menu">Top menu items here</div>
    <div id="menu">Menu items here</div>
    <div id="content"><%= content_for?(:content) ? yield(:content) : yield %></div>
  </body>
</html>



<% content_for :stylesheets do %>
  #top_menu {display: none}
  #right_menu {float: right; background-color: yellow; color: black}
<% end %>
<% content_for :content do %>
  <div id="right_menu">Right menu items here</div>
  <%= content_for?(:news_content) ? yield(:news_content) : yield %>
<% end %>
<%= render template: "layouts/application" %>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------
Gem creation, Gem structure example
-----------------------------------

---1---

$ gem install bundler && bundle -v


---2---

$ bundle gem test_gem


---3---

$ gem build test_gem


---4---

$ gem install test_gem


---5---

$ gem push test_gem


---6---

$ gem list




https://github.com/kaize/configus



---------------------------------------------------------------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------------------------------------------------------------

--------
Minitest
--------

---1---

--- Gemfile ---

source "https://rubygems.org"

gem "minitest"


---2---

--- magic_ball.rb ---

require 'minitest/autorun'

class MagicBallTest < Minitest::Test
end


---3---

--- magic_ball.rb ---

require 'minitest/autorun'

class MagicBallTest < Minitest::Test
  def test_ask_returns_an_answer
    magic_ball = MagicBall.new
    assert magic_ball.ask("Whatever") != nil
  end
end





Run options: --seed 10646

# Running:

E

Finished in 0.001484s, 674.0230 runs/s, 0.0000 assertions/s.

  1) Error:
MagicBallTest#test_ask_returns_an_answer:
NameError: uninitialized constant MagicBallTest::MagicBall
    magic_ball.rb:5:in `test_ask_returns_an_answer'

1 runs, 0 assertions, 0 failures, 1 errors, 0 skips






---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------


-------------------------
Add jQuery to rails 7 app
-------------------------

---1---

Terminal
--------

$ yarn add jquery



---2---

app/javascript/application.js
-----------------------------

import “./add_jquery”



---3---

Terminal
--------

$ touch app/javascript/add_jquery.js



---4---

app/javascript/add_jquery.js
----------------------------

import jquery from "jquery";

window.jQuery = jquery;
window.$ = jquery;



---5---

on page
-------

<script type="text/javascript">
  window.onload = function () {
    $(function() {
      # jQuery code here...
    });
  };
</script>



---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

---------------------------
Nested Model Form (revised)
---------------------------

---1---

models/survey.rb 
----------------

class Survey < ActiveRecord::Base
  attr_accessible :name, :questions_attributes
  has_many :questions
  accepts_nested_attributes_for :questions, allow_destroy: true
end



---2---

models/question.rb
------------------

class Question < ActiveRecord::Base
  attr_accessible :content, :survey_id, :answers_attributes
  belongs_to :survey
  has_many :answers
  accepts_nested_attributes_for :answers, allow_destroy: true
end



---3---

views/surveys/_form.html.erb
----------------------------

<%= f.fields_for :questions do |builder| %>
  <%= render 'question_fields', f: builder %>
<% end %>
<%= link_to_add_fields "Add Question", f, :questions %>




---4---

views/surveys/_question_fields.html.erb
---------------------------------------

<fieldset>
  <%= f.label :content, "Question" %><br />
  <%= f.text_area :content %><br />
  <%= f.check_box :_destroy %>
  <%= f.label :_destroy, "Remove Question" %>
  <%= f.fields_for :answers do |builder| %>
    <%= render 'answer_fields', f: builder %>
  <% end %>
  <%= link_to_add_fields "Add Answer", f, :answers %>
</fieldset>



---5---

views/surveys/_answer_fields.html.erb
-------------------------------------


<fieldset>
  <%= f.label :content, "Answer" %>
  <%= f.text_field :content %>
  <%= f.hidden_field :_destroy %>
  <%= link_to "remove", '#', class: "remove_fields" %>
</fieldset>



---6---

surveys.js.coffee
-----------------

jQuery ->
  $('form').on 'click', '.remove_fields', (event) ->
    $(this).prev('input[type=hidden]').val('1')
    $(this).closest('fieldset').hide()
    event.preventDefault()

  $('form').on 'click', '.add_fields', (event) ->
    time = new Date().getTime()
    regexp = new RegExp($(this).data('id'), 'g')
    $(this).before($(this).data('fields').replace(regexp, time))
    event.preventDefault()



---7---

application_helper.rb
---------------------

module ApplicationHelper
  def link_to_add_fields(name, f, association)
    new_object = f.object.send(association).klass.new
    id = new_object.object_id
    fields = f.fields_for(association, new_object, child_index: id) do |builder|
      render(association.to_s.singularize + "_fields", f: builder)
    end
    link_to(name, '#', class: "add_fields", data: {id: id, fields: fields.gsub("\n", "")})
  end
end





---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------
Rack application start commands
-------------------------------

автоматически ищется файл config.ru
-----------------------------------

$ rackup
$ rackup -s thin
$ thin start
$ puma
$ unicorn
$ passenger start




Запустили сервер
----------------

$ rackup



В другом терминале выполнили запрос
-----------------------------------

$ curl -X GET localhost:9292




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------
Rails credentials
-----------------

Create credentials
------------------

$ EDITOR=vim rails credentials:edit
$ EDITOR="subl --wait" rails credentials:edit
$ EDITOR=vim RAILS_ENV=production rails credentials:edit



Create db on production
-----------------------

$ RAILS_ENV=production bundle exec rake db:create db:schema:load



Logs for -e production
----------------------

$ export RAILS_LOG_TO_STDOUT=true


In production.rb you can add this option
----------------------------------------

config.logger = Logger.new(STDOUT)




---------------------------------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------------------------------