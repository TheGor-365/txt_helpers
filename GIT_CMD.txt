-------------
Git commands:
-------------

----------------------------------------------------------------------------------------------------------------------------------------------

init
----

git init 							        --- создает новый репозиторий Git


----------------------------------------------------------------------------------------------------------------------------------------------

add
---

git add file_name 						    --- добавление файла, начало отслеживания файла 
git add . 							        --- включить в git все файли текущей и внутренних директорий
git add i                                   --- вывести status в интерактивном режиме


----------------------------------------------------------------------------------------------------------------------------------------------

diff
----

git diff 							        --- просмотр изменений (суммарных, а не всех по очереди, как в «git log»)
git diff HEAD							    --- изменения в проекте по сравнению с последним коммитом
git diff HEAD^							    --- изменения в проекте по сравнению с предпоследним коммитом
git diff master^						    --- обратиться прямо к предку последнего коммита ветки master
git diff HEAD^2							    --- адресоваться по нескольким предкам коммитов слияния


----------------------------------------------------------------------------------------------------------------------------------------------

commit
------

git commit -m 'Some_comment' -a 			--- фиксация первоначального состояния проекта (все файлы)
git commit 							        --- фиксация, сохранение в репозиторий
git commit --amend 						    --- сохранить в последний коммит забытые изменения
git commit FILENAME						    --- создаёт коммит на основе изменений единственного файла
git commit -c ORIG_HEAD						--- возврат к последнему коммиту, будет предложено отредактировать его сообщение


----------------------------------------------------------------------------------------------------------------------------------------------

config
------

git config 							        --- конфигурация аккаунта (имя, почта и т.д.)


----------------------------------------------------------------------------------------------------------------------------------------------

clone
-----

git clone 							        --- получить свою собственную копию
git clone 							        --- создает локальную копию удаленного объекта
git clone url. --branch = tag_name 			--- клонировать тег


----------------------------------------------------------------------------------------------------------------------------------------------

checkout
--------

git checkout --orphan newbranch				--- cоздание новой пустой ветки
git checkout branch_name 					--- переключиться на другую ветку
git checkout master 						--- переключиться обратно
git checkout * 							    --- проверить ветви
git checkout -b some origin/some_branch 	--- работать с веткой some_branch
git checkout tags/tag_name -b branch_name 	--- запуск тега
git checkout somefile						--- возвращает somefile к состоянию последнего коммита
git checkout HEAD~2 somefile				--- возвращает somefile к состоянию на два коммита назад по ветке
git checkout 7c2fcf8                        --- переключиться на ветку по ID


----------------------------------------------------------------------------------------------------------------------------------------------

cherry-pick
-----------

git cherry-pick BUG_FIX_TAG					--- изменения будут применены к дереву роиндексированы и станут коммитом в активной ветке
git cherry-pick BUG_FIX_TAG -n				--- без индексации и создания коммита


----------------------------------------------------------------------------------------------------------------------------------------------

clean
-----

git clean -f 							    --- удаление untracked files
git clean -fd                               --- удаление untracked files
git clean -fd                               --- удаление файлов не подготовленный к изменениям                      


----------------------------------------------------------------------------------------------------------------------------------------------

push
----

git push -u origin master 					--- отправить репозиторий на GitHub 
git push origin HEAD 						--- запушить текущую ветку, не вводя целиком ее название
git push origin :branch-name 				--- удалить бранч из репозитория на сервере
git push 							        --- поделиться нашей работой  
git push origin branch_name 				--- толкает локальную ветвь к удаленному источнику                          
git push origin tag_name 					--- добавление в репозиторий GitHub с тегом
git push origin --tags 						--- добавление в репозиторий GitHub с тегами


----------------------------------------------------------------------------------------------------------------------------------------------

pull
----

git pull 							        --- подтянуть последние изменения из сервера
git pull origin 						    --- «накатить» в локальный репозиторий последнюю версию кода


----------------------------------------------------------------------------------------------------------------------------------------------

status
------

git status 							        --- проверяет содержимое рабочего каталога и промежуточной области


----------------------------------------------------------------------------------------------------------------------------------------------

show
----

git show tag_name 						    --- инфо о теге
git show HEAD 							    --- 
git show d8578edf8458ce06fbc5bb76a58c5 		--- изменения, сделанные в заданном коммите


----------------------------------------------------------------------------------------------------------------------------------------------

stash
-----

git stash save 							--- удалить изменения и вернуть состояние посленего коммита
git stash apply 						--- восстановление не сохраненных изменений
git stash drop 							--- удалить stash


----------------------------------------------------------------------------------------------------------------------------------------------

sparse-checkout
---------------

git sparse-checkout 					--- инициализация и изменение


----------------------------------------------------------------------------------------------------------------------------------------------

switch
------

git switch 							    --- change branch
git switch refactoring                  --- перейти на ветку refactoring


----------------------------------------------------------------------------------------------------------------------------------------------

reset
-----

git reset							    --- сбросить весь индекс или удалить из него изменения определенного файла
git reset — EDITEDFILE					--- удаляет из индекса конкретный файл
git reset --hard HEAD 					--- безвозвратное удаление 
git reset --soft branch_name 			--- удалить из текущей ветки с сохранением в индекс
git reset --HARD 						--- откатиться назад (откатывает изменения)
git reset --hard d8578edf8458ce06fbc 	--- откатиться к конкретному коммиту
git reset --soft d8578edf8458ce06fbc 	--- откатиться к конкретному коммиту но файлы на диске остаются без изменений
git reset --hard HEAD~2                 --- удалить два последних коммита


----------------------------------------------------------------------------------------------------------------------------------------------

revert
------

git revert 							    --- отменить опубликованные коммиты с помощью новых
git revert d8578edf8458ce06fbc5bb7 		--- попытаться обратить заданный commit
git revert config-modify-tag			--- отменяет коммит, помеченный тегом
git revert HEAD                         --- отменяет последние изменения


----------------------------------------------------------------------------------------------------------------------------------------------

remote
------

git remote -v 							--- перечисляет имя удаленного объекта, источник, а также его местоположение
git remote show origin 					--- просмотр удаленного репозитория
git remote rename name_1 name_2 		--- переименование удалённых репозиториев
git remote add origin https://path 		--- создать репозиторий 
git remote set-url origin https://path 	--- сменить адрес репазитория
git rebase 							    --- повторное нанесение фиксации поверх другого базового 
git-rebase master topic					--- вариант, в котором явно указывается, что и куда накладывается
git-rebase master						--- на master накладывается активная в настоящий момент ветка
git rebase --continue					--- продолжить наложение следующих коммитов командой
git rebase --abort 						--- отмена работы команды и всех внесенных изменений
git rebase -i --root 				    --- изменение коммитов


----------------------------------------------------------------------------------------------------------------------------------------------

reflog
------

git reflog                              --- журнал дейсвий (старые логи удаленных репозиториев)


----------------------------------------------------------------------------------------------------------------------------------------------

rm
--

git rm 								    --- удаление файлов из рабочего дерева и из индекса
git rm Documentation/\*.txt             --- удаляются сразу все файлы txt из папки
git rm -r --cached .                    --- вносит в индекс все удаленные файлы
git rm file.txt --cached                --- файл будет удалён из репозитория, но не из рабочей директории


----------------------------------------------------------------------------------------------------------------------------------------------

restore
-------

git restore 							--- восстановление файлов рабочего дерева
git restore my_file.txt                 --- восстановление удаленный файлов, отмена изменений в файле


----------------------------------------------------------------------------------------------------------------------------------------------

tag
---

git tag some_tag 						--- создание тэга
git tag -a v1.0 -m "comment" 			--- добавить тег
git tag 							    --- список тегов
git tag -d tag_name 					--- удалить тег
git tag stable-1						--- создаёт «легковесный» тэг, связанный с последним коммитом
git tag -f stable-1.1					--- создаёт тэг для последнего коммита, заменяет существующий
git tag stable-2 f292ef5				--- помечает определенный коммит


----------------------------------------------------------------------------------------------------------------------------------------------

fetch
-----

git fetch --all --tags --prune 			--- проверка сущесвования тега
git fetch 							    --- переносит эти изменения на то, что называется удаленной ветвью
git fetch origin 						--- cкачать все ветки с origin, но не мержить их в локальный репозиторий
git fetch [remote-name] 				--- получение изменений из удалённого репозитория


----------------------------------------------------------------------------------------------------------------------------------------------

branch
------

git branch							    --- просто перечисляет существующие ветки, отметив активную
git branch branch_name 					--- создаёт новую ветку
git branch -a 							--- все существующие ветви
git branch -d branch_name 				--- удаляет ветку если та была залита (merged) с разрешением возможных конфликтов в текущую
git branch -D some_branch 				--- просто удалить бранч
git branch -m new-name-branch			--- переименовывает ветку


----------------------------------------------------------------------------------------------------------------------------------------------

merge
-----

git merge branch_name 					--- включить изменения на главную ветвь
git merge new-feature					--- пытается объединить текующую ветку и ветку new-feature
git merge origin/master 				--- объедить origin/master в свою локальную ветвь master


----------------------------------------------------------------------------------------------------------------------------------------------

mergetool
---------

git mergetool 							--- разрешение конфликтов (когда оные возникают в результате мержа)


----------------------------------------------------------------------------------------------------------------------------------------------

workflow
--------

git workflow 							--- 
git worktree add path/ remote/master	--- добавление ветки в отдельную директорию
git worktree list						--- просмотр всех директориев с ветками
git worktree move old-path/ new-path/	--- перести в другое место директорию с веткой
git worktree remove path/ 				--- после окончания работы с веткой в директории, её можно удалить


----------------------------------------------------------------------------------------------------------------------------------------------

log
---

git log 							    --- просмотр более ранних версий
git log --oneline                       --- просмотр более ранних версий ( краткий, в одну строку )
git log --reverse 						--- история изменений в обратном порядке
git log file.txt 						--- история конкретного файла
git log -p file.txt 					--- история конкретного файла с просмотром сделанных изменений
git log --stat --graph 					--- история с именами файлов и псевдографическим изображением бранчей
git log -p --oneline -- file.txt        --- найти коммит, в котором был добавлен файл file.txt


----------------------------------------------------------------------------------------------------------------------------------------------

bisect
------

git bisect 							    --- используйте двоичный поиск, чтобы найти фиксацию, которая ввела ошибку


----------------------------------------------------------------------------------------------------------------------------------------------

blame
-----

git blame file.txt 						--- посмотреть, кем в последний раз правилась каждая строка файла


----------------------------------------------------------------------------------------------------------------------------------------------

grep
----

git grep 							    --- печать линий, соответствующих шаблону
git grep -с tst							--- подсчитывает число упоминаний tst в проекте
git grep tst v1							--- подсчитывает число упоминаний tst в проекте, ищет в старой версии проекта
git grep -e 'first' --and -e 'another'	--- ищет строки, где упоминаются и первое слово, и второе
git grep --all-match -e 'first' -e 's'	--- ищет строки, где встречается хотя бы одно из слов


----------------------------------------------------------------------------------------------------------------------------------------------

git --version 							--- version
git --help 							    --- help
git --info-path 						--- 
git -p | --paginate 					---
git --no-replace-objects 				--- 
git --html-path 						---
git --man-path 							---


----------------------------------------------------------------------------------------------------------------------------------------------

touch .gitignore 						--- создать папку .gitignore
echo '' > .gitignore 					--- создание .gitignore
nano -w .gitignore 						--- вход в .gitignore для настройки
*.txt 								    --- включение файлов формата .txt в игнор
cat .gitignor 							--- вход в гитигнор


----------------------------------------------------------------------------------------------------------------------------------------------

q 								        --- выход из diff и log


----------------------------------------------------------------------------------------------------------------------------------------------





--------------------
Комплексные команды:
--------------------


Проработать версию проекта:
---------------------------

1. git branch && git branch <новая ветка>
2. git checkout <новая ветка>
3. git add . && git commit -m 'коммит'
4. git push
5. git checkout main && git merge <новая ветка>

6. git branch -D <новая ветка> ( опционально )


----------------------------------------------------------------------------------------------------------------------------------------------


Подтянуть версию проекта:
-------------------------

1. git clone <URI репозитория>
2. git log
3. git checkout <хэш коммита или тег>
4. git checkout -b my-fork


----------------------------------------------------------------------------------------------------------------------------------------------

Залить проект в новый репазиторий:
----------------------------------

1. git clone --mirror git@oldserver:oldproject.git
2. cd oldproject.git
3. git remote add new git@newserver:newproject.git
4. git push --mirror new


----------------------------------------------------------------------------------------------------------------------------------------------

Создание пустого репозитория на сервере в косоли:
-------------------------------------------------

1. repo="repo.git" 
2. mkdir $repo
3. cd $repo
4. git init --bare
5. chown git. -R ./
6. cd ../


----------------------------------------------------------------------------------------------------------------------------------------------

Перенос коммитов между репозиториями:
-------------------------------------

1. git init
2. git remote add remote_a url_a
3. git remote add remote_b url_b
4. git fetch remote_a
5. git fetch remote_b
6. git checkout -b master remote_a/master


----------------------------------------------------------------------------------------------------------------------------------------------





























































